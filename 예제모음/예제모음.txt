21.10.15_1회차
===============================================================================
*자료형변환응용, 로또
===============================================================================








################################################################################################################
예제1)자료형변환, 배열응용

1)함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 
	예를들어 n이 118372면 873211을 리턴하면 됩니다.
################################################################################################################

답:


import java.util.Arrays;

class Solution {
    public long solution(long n) {
        
        
        long answer = 0;
        String num = String.valueOf(n);
		char[] arr = new char[num.length()];
		
		for(int i=0;i<num.length();i++) {
			arr[i] = num.charAt(i);
		}
		
		Arrays.sort(arr);
		
		String tmp = "";
		for(int i=num.length()-1;i>=0;i--) {
			tmp += arr[i];
		}
		
		answer = Long.valueOf(tmp);
	
        
        return answer;
    }
}










################################################################################################################
예제2)로또의 최고순위와 최저순위

1)문제 설명
로또 6/45(이하 '로또'로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다. 1

순위	당첨 내용
1	6개 번호가 모두 일치
2	5개 번호가 일치
3	4개 번호가 일치
4	3개 번호가 일치
5	2개 번호가 일치
6(낙첨)	그 외
로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.
알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.

당첨 번호	31	10	45	1	6	19	결과
최고 순위 번호	31	0→10	44	1	0→6	25	4개 번호 일치, 3등
최저 순위 번호	31	0→11	44	1	0→7	25	2개 번호 일치, 5등
순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.
알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.
알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.
민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

제한사항
lottos는 길이 6인 정수 배열입니다.
lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
0은 알아볼 수 없는 숫자를 의미합니다.
0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.
lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.
win_nums은 길이 6인 정수 배열입니다.
win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.
win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.
입출력 예
lottos	win_nums	result
[44, 1, 0, 0, 31, 25]	[31, 10, 45, 1, 6, 19]	[3, 5]
[0, 0, 0, 0, 0, 0]	[38, 19, 20, 40, 15, 25]	[1, 6]
[45, 4, 35, 20, 3, 9]	[20, 9, 3, 45, 4, 35]	[1, 1]
입출력 예 설명
입출력 예 #1
문제 예시와 같습니다.

입출력 예 #2
알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다.

당첨 번호	38	19	20	40	15	25	결과
최고 순위 번호	0→38	0→19	0→20	0→40	0→15	0→25	6개 번호 일치, 1등
최저 순위 번호	0→21	0→22	0→23	0→24	0→26	0→27	0개 번호 일치, 6등
입출력 예 #3
민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다.

실제로 사용되는 로또 순위의 결정 방식과는 약간 다르지만, 이 문제에서는 지문에 명시된 대로 로또 순위를 결정하도록 합니다.  ↩

################################################################################################################




흐억, shadowcat02님 답 :

import java.util.HashMap;
import java.util.Map;

class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        Map<Integer, Boolean> map = new HashMap<Integer, Boolean>();
		//이부분은 boolean안하고 integer해서 0만 넣어도 될듯 굳이 true쓸일없다
        int zeroCount = 0;

        for(int lotto : lottos) {
            if(lotto == 0) {
                zeroCount++;
                continue;
            }
            map.put(lotto, true);
        }


        int sameCount = 0;
        for(int winNum : win_nums) {
            if(map.containsKey(winNum)) sameCount++;
        }

        int maxRank = 7 - (sameCount + zeroCount);
        int minRank = 7 - sameCount;
        if(maxRank > 6) maxRank = 6;
        if(minRank > 6) minRank = 6;

        return new int[] {maxRank, minRank};
    }
}












내 답:


import java.util.Arrays;

public class Solution {
	public static final int TOTAL = 6;
	public static final int MAX_EQUAL = 0;
	public static final int MIN_EQUAL = 1;
	public static final int MAX_RANK = 0;
	public static final int MIN_RANK = 1;
	
	
	public void sort(int[] lottos, int[] win_nums) {
		Arrays.sort(lottos);
		Arrays.sort(win_nums);
	}
	
	public int checkZeroCount(int[] lottos) {
		int count = 0;
		
		for(int i=0;i<TOTAL;i++) {
			if(lottos[i] == 0) {
				count++;
			}
		}
	
		return count;
	}
	
	public int checkNumber(int[] lottos, int[] win_nums, int zeroCount) {
		if(zeroCount == 6) return 0;
		
		int i = zeroCount;
		int j = 0;
		
		int equalCount = 0;
		
		while(i<6) {
			while(j!=6 && lottos[i] != win_nums[j]) {
				j++;
			}
			if(j!=6) equalCount++;
			j=0;
			i++;
		}
		
		return equalCount;
	}
	
	public int[] maxMinEqual(int equalCount, int zeroCount) {
		
		int[] result = new int[2];
		
		switch(equalCount){
		case 6: 
			result[MAX_EQUAL] = 6;
			result[MIN_EQUAL] = 6; 
			break;
		case 5: 
			result[MAX_EQUAL] = 5+zeroCount;
			result[MIN_EQUAL] = 5; 
			break;
		case 4: 
			result[MAX_EQUAL] = 4+zeroCount;
			result[MIN_EQUAL] = 4; 
			break;
		case 3: 
			result[MAX_EQUAL] = 3+zeroCount;
			result[MIN_EQUAL] = 3; 
			break;
		case 2: 
			result[MAX_EQUAL] = 2+zeroCount;
			result[MIN_EQUAL] = 2; 
			break;
		case 1: 
			result[MAX_EQUAL] = 1+zeroCount;
			result[MIN_EQUAL] = 0; 
			break;
		case 0:
			result[MAX_EQUAL] = zeroCount;
			result[MIN_EQUAL] = 0; 			
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.1");
			System.exit(0);
		}
		
		return result;
	}
	
	public int checkMaxRank(int[] result) {
		
		int maxRank = 0;
		
		switch(result[MAX_EQUAL]) {
		case 6:
			maxRank = 1;
			break;
		case 5:
			maxRank = 2;
			break;
		case 4:
			maxRank = 3;
			break;
		case 3:
			maxRank = 4;
			break;
		case 2:
			maxRank = 5;
			break;
		case 1:
		case 0:
			maxRank = 6;
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.2");
			System.exit(0);
		}
		
		return maxRank;
	}
	
	public int checkMinRank(int[] result) {
		
		int minRank = 0;
		
		switch(result[MIN_EQUAL]) {
		case 6:
			minRank = 1;
			break;
		case 5:
			minRank = 2;
			break;
		case 4:
			minRank = 3;
			break;
		case 3:
			minRank = 4;
			break;
		case 2:
			minRank = 5;
			break;
		case 0:
			minRank = 6;
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.3");
			System.exit(0);
		}
		
		return minRank;
	}
	
    int[] solution(int[] lottos, int[] win_nums) {
       int[] answer = {};
      
       sort(lottos, win_nums);
        
       System.out.println(Arrays.toString(lottos));
       System.out.println(Arrays.toString(win_nums));
       
       int zeroCount = checkZeroCount(lottos);
       
       int equalCount = checkNumber(lottos, win_nums, zeroCount);
       int[] maxMinResult = maxMinEqual(equalCount, zeroCount);
       
       int maxRank = checkMaxRank(maxMinResult);
       int minRank = checkMinRank(maxMinResult);
       
       System.out.println("최고 등수: "+maxRank);
       System.out.println("최소 등수: "+minRank);
       
       answer = new int[]{maxRank, minRank};
       
       return answer;
    }

}




package dsf;

public class MainClass {

	public static void main(String[] args) {

		int[] lottos = {0, 0, 0, 0, 0, 0};
		int[] win_nums = {20, 9, 3, 45, 4, 35};
		
		
		Solution sol = new Solution();
		
		sol.solution(lottos, win_nums);

	}

}
