21.10.15_1회차
===============================================================================
*자료형변환응용, 로또
===============================================================================








################################################################################################################
예제1)자료형변환, 배열응용

1)함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 
	예를들어 n이 118372면 873211을 리턴하면 됩니다.



import java.util.Arrays;

class Solution {
    public long solution(long n) {
        long answer = 0;

        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12933

################################################################################################################

답:


import java.util.Arrays;

class Solution {
    public long solution(long n) {
        
        
        long answer = 0;
        String num = String.valueOf(n);
		char[] arr = new char[num.length()];
		
		for(int i=0;i<num.length();i++) {
			arr[i] = num.charAt(i);
		}
		
		Arrays.sort(arr);
		
		String tmp = "";
		for(int i=num.length()-1;i>=0;i--) {
			tmp += arr[i];
		}
		
		answer = Long.valueOf(tmp);
	
        
        return answer;
    }
}





import java.util.Arrays;
class Solution {
    public long solution(long n) {
        long answer = 0;
        String i = String.valueOf(n);
        char[] sol = i.toCharArray();
        Arrays.sort(sol);
        i =  new StringBuilder(new String(sol)).reverse().toString();
        answer = Long.parseLong(i);
        
        return answer;
    }
}
 














################################################################################################################
예제2)로또의 최고순위와 최저순위

1)문제 설명
로또 6/45(이하 '로또'로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다. 1

순위	당첨 내용
1	6개 번호가 모두 일치
2	5개 번호가 일치
3	4개 번호가 일치
4	3개 번호가 일치
5	2개 번호가 일치
6(낙첨)	그 외
로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.
알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.

당첨 번호	31	10	45	1	6	19	결과
최고 순위 번호	31	0→10	44	1	0→6	25	4개 번호 일치, 3등
최저 순위 번호	31	0→11	44	1	0→7	25	2개 번호 일치, 5등
순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.
알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.
알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.
민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

제한사항
lottos는 길이 6인 정수 배열입니다.
lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
0은 알아볼 수 없는 숫자를 의미합니다.
0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.
lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.
win_nums은 길이 6인 정수 배열입니다.
win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.
win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.
입출력 예
lottos	win_nums	result
[44, 1, 0, 0, 31, 25]	[31, 10, 45, 1, 6, 19]	[3, 5]
[0, 0, 0, 0, 0, 0]	[38, 19, 20, 40, 15, 25]	[1, 6]
[45, 4, 35, 20, 3, 9]	[20, 9, 3, 45, 4, 35]	[1, 1]
입출력 예 설명
입출력 예 #1
문제 예시와 같습니다.

입출력 예 #2
알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다.

당첨 번호	38	19	20	40	15	25	결과
최고 순위 번호	0→38	0→19	0→20	0→40	0→15	0→25	6개 번호 일치, 1등
최저 순위 번호	0→21	0→22	0→23	0→24	0→26	0→27	0개 번호 일치, 6등
입출력 예 #3
민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다.

실제로 사용되는 로또 순위의 결정 방식과는 약간 다르지만, 이 문제에서는 지문에 명시된 대로 로또 순위를 결정하도록 합니다.  ↩



class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/77484
################################################################################################################




흐억, shadowcat02님 답 :

import java.util.HashMap;
import java.util.Map;

class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        Map<Integer, Boolean> map = new HashMap<Integer, Boolean>();
		//이부분은 boolean안하고 integer해서 0만 넣어도 될듯 굳이 true쓸일없다
        int zeroCount = 0;

        for(int lotto : lottos) {
            if(lotto == 0) {
                zeroCount++;
                continue;
            }
            map.put(lotto, true);
        }


        int sameCount = 0;
        for(int winNum : win_nums) {
            if(map.containsKey(winNum)) sameCount++;
        }

        int maxRank = 7 - (sameCount + zeroCount);
        int minRank = 7 - sameCount;
        if(maxRank > 6) maxRank = 6;
        if(minRank > 6) minRank = 6;

        return new int[] {maxRank, minRank};
    }
}












내 답1(복습시 생각해낸 howCount최소연산):


import java.util.*;

class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        int[] answer = {};
        
        int factCount = 0;
        int howCount = 0;
        
        Arrays.sort(lottos);
        
        while(howCount<6&&lottos[howCount]==0) {
        	howCount++;
        }
        if(howCount==6) return new int[]{1,6};
        
        Map<Integer, Boolean> hm = new HashMap<>();
        
        for(int i=0;i<6;i++) {
        	hm.put(lottos[i], false);
        }
        
        for(int i=0;i<6;i++) {
        	if(hm.containsKey(win_nums[i])) {
        		factCount++;
        	};
        }
        
        
        int maxLank = 7-(factCount+howCount);
        int minLank = 7-factCount;
        
        if(maxLank == 7) maxLank = 6; 
        if(minLank == 7) minLank = 6; 
        		
        answer = new int[2];
        answer[0] = maxLank;
        answer[1] = minLank;
        
        return answer;
    }
}







내 답2(제일처음 헛수고한답):

import java.util.Arrays;

public class Solution {
	public static final int TOTAL = 6;
	public static final int MAX_EQUAL = 0;
	public static final int MIN_EQUAL = 1;
	public static final int MAX_RANK = 0;
	public static final int MIN_RANK = 1;
	
	
	public void sort(int[] lottos, int[] win_nums) {
		Arrays.sort(lottos);
		Arrays.sort(win_nums);
	}
	
	public int checkZeroCount(int[] lottos) {
		int count = 0;
		
		for(int i=0;i<TOTAL;i++) {
			if(lottos[i] == 0) {
				count++;
			}
		}
	
		return count;
	}
	
	public int checkNumber(int[] lottos, int[] win_nums, int zeroCount) {
		if(zeroCount == 6) return 0;
		
		int i = zeroCount;
		int j = 0;
		
		int equalCount = 0;
		
		while(i<6) {
			while(j!=6 && lottos[i] != win_nums[j]) {
				j++;
			}
			if(j!=6) equalCount++;
			j=0;
			i++;
		}
		
		return equalCount;
	}
	
	public int[] maxMinEqual(int equalCount, int zeroCount) {
		
		int[] result = new int[2];
		
		switch(equalCount){
		case 6: 
			result[MAX_EQUAL] = 6;
			result[MIN_EQUAL] = 6; 
			break;
		case 5: 
			result[MAX_EQUAL] = 5+zeroCount;
			result[MIN_EQUAL] = 5; 
			break;
		case 4: 
			result[MAX_EQUAL] = 4+zeroCount;
			result[MIN_EQUAL] = 4; 
			break;
		case 3: 
			result[MAX_EQUAL] = 3+zeroCount;
			result[MIN_EQUAL] = 3; 
			break;
		case 2: 
			result[MAX_EQUAL] = 2+zeroCount;
			result[MIN_EQUAL] = 2; 
			break;
		case 1: 
			result[MAX_EQUAL] = 1+zeroCount;
			result[MIN_EQUAL] = 0; 
			break;
		case 0:
			result[MAX_EQUAL] = zeroCount;
			result[MIN_EQUAL] = 0; 			
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.1");
			System.exit(0);
		}
		
		return result;
	}
	
	public int checkMaxRank(int[] result) {
		
		int maxRank = 0;
		
		switch(result[MAX_EQUAL]) {
		case 6:
			maxRank = 1;
			break;
		case 5:
			maxRank = 2;
			break;
		case 4:
			maxRank = 3;
			break;
		case 3:
			maxRank = 4;
			break;
		case 2:
			maxRank = 5;
			break;
		case 1:
		case 0:
			maxRank = 6;
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.2");
			System.exit(0);
		}
		
		return maxRank;
	}
	
	public int checkMinRank(int[] result) {
		
		int minRank = 0;
		
		switch(result[MIN_EQUAL]) {
		case 6:
			minRank = 1;
			break;
		case 5:
			minRank = 2;
			break;
		case 4:
			minRank = 3;
			break;
		case 3:
			minRank = 4;
			break;
		case 2:
			minRank = 5;
			break;
		case 0:
			minRank = 6;
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.3");
			System.exit(0);
		}
		
		return minRank;
	}
	
    int[] solution(int[] lottos, int[] win_nums) {
       int[] answer = {};
      
       sort(lottos, win_nums);
        
       System.out.println(Arrays.toString(lottos));
       System.out.println(Arrays.toString(win_nums));
       
       int zeroCount = checkZeroCount(lottos);
       
       int equalCount = checkNumber(lottos, win_nums, zeroCount);
       int[] maxMinResult = maxMinEqual(equalCount, zeroCount);
       
       int maxRank = checkMaxRank(maxMinResult);
       int minRank = checkMinRank(maxMinResult);
       
       System.out.println("최고 등수: "+maxRank);
       System.out.println("최소 등수: "+minRank);
       
       answer = new int[]{maxRank, minRank};
       
       return answer;
    }

}




package dsf;

public class MainClass {

	public static void main(String[] args) {

		int[] lottos = {0, 0, 0, 0, 0, 0};
		int[] win_nums = {20, 9, 3, 45, 4, 35};
		
		
		Solution sol = new Solution();
		
		sol.solution(lottos, win_nums);

	}

}




















































































21.10.16_2회차
===============================================================================
*hash, stack, queue
===============================================================================
























































































################################################################################################################
예제3)해시문제(루프로도 풀수 있음)

1)완주하지 못한 선수
수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.

마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

제한사항
마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
completion의 길이는 participant의 길이보다 1 작습니다.
참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
참가자 중에는 동명이인이 있을 수 있습니다.
입출력 예
participant	completion	return
["leo", "kiki", "eden"]	["eden", "kiki"]	"leo"
["marina", "josipa", "nikola", "vinko", "filipa"]	["josipa", "filipa", "marina", "nikola"]	"vinko"
["mislav", "stanko", "mislav", "ana"]	["stanko", "ana", "mislav"]	"mislav"
입출력 예 설명
예제 #1
"leo"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #2
"vinko"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #3
"mislav"는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.

출처



class Solution {
    public String solution(String[] participant, String[] completion) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42576
################################################################################################################



루프를 이용한 답:

import java.util.*;

class Solution {
    public String solution(String[] participant, String[] completion) {
        
        Arrays.sort(participant);
        Arrays.sort(completion);
        
        int i = 0;
        for(String com : completion) {
        	if(!com.equals(participant[i])) {
        		return participant[i];
        	}
        	i++;
        }
      
        return participant[i];
    }
}




해쉬를 이용한 답:
import java.util.*;

class Solution {
    public String solution(String[] participant, String[] completion) {
    	String answer = "";
      
    	HashMap<String, Integer> hm = new HashMap<>();
    	
    	for(String player : participant) {
    		hm.put(player, hm.getOrDefault(player, 0)+1);
    	}
    	
    	for(String player : completion) {
    		hm.put(player, hm.get(player)-1);
    	}
    	
    	for(String key : hm.keySet()) {
    		if(hm.get(key) != 0) {
    			answer = key;
    			break;
    		};
    	}
    	
        return answer;
    }
}























################################################################################################################
예제4)해시문제(루프로도 풀수 있음)

1)전화번호 목록
전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.

구조대 : 119
박준영 : 97 674 223
지영석 : 11 9552 4421
전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.

제한 사항
phone_book의 길이는 1 이상 1,000,000 이하입니다.
각 전화번호의 길이는 1 이상 20 이하입니다.
같은 전화번호가 중복해서 들어있지 않습니다.
입출력 예제
phone_book	return
["119", "97674223", "1195524421"]	false
["123","456","789"]	true
["12","123","1235","567","88"]	false
입출력 예 설명
입출력 예 #1
앞에서 설명한 예와 같습니다.

입출력 예 #2
한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.

입출력 예 #3
첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.



class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42577
################################################################################################################



루프를 이용한 답:



import java.util.*;

class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        
        for(int i =0; i<phone_book.length-1;i++) {
        	for(int j=i+1;j<phone_book.length;j++) {
        		if(phone_book[i].startsWith(phone_book[j])) return false;
        		if(phone_book[j].startsWith(phone_book[i])) return false;
        	}
        }
       
        return answer;
    }
}









hash를 이용한 답:

import java.util.*;

class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        
        HashMap<String, Integer> hm = new HashMap<>();
        
        
        int i = 0;
        for(String number : phone_book) {
        	hm.put(number, i);
        	i++;
        }
        
        for(String number : phone_book) {
        	for(int j=1;j<number.length();j++) {
        		if(hm.containsKey(number.substring(0, j))) return false;
        	}
        }
        
       
        return answer;
    }
}































################################################################################################################
예제5)해시문제(루프로도 풀수 있음)

1)스파이 위장

스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.

예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.

종류	이름
얼굴	동그란 안경, 검정 선글라스
상의	파란색 티셔츠
하의	청바지
겉옷	긴 코트
스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.
스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.
같은 이름을 가진 의상은 존재하지 않습니다.
clothes의 모든 원소는 문자열로 이루어져 있습니다.
모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 '_' 로만 이루어져 있습니다.
스파이는 하루에 최소 한 개의 의상은 입습니다.
입출력 예
clothes	return
[["yellowhat", "headgear"], ["bluesunglasses", "eyewear"], ["green_turban", "headgear"]]	5
[["crowmask", "face"], ["bluesunglasses", "face"], ["smoky_makeup", "face"]]	3
입출력 예 설명
예제 #1
headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.

1. yellow_hat
2. blue_sunglasses
3. green_turban
4. yellow_hat + blue_sunglasses
5. green_turban + blue_sunglasses
예제 #2
face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.

1. crow_mask
2. blue_sunglasses
3. smoky_makeup





class Solution {
    public int solution(String[][] clothes) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42578
################################################################################################################



해쉬맵을 이용해서 경우의 수 계산한 답:


import java.util.*;
class Solution {
    public int solution(String[][] clothes) {
        int answer = 1;
        
        HashMap<String, Integer> hm = new HashMap<>();
        
        for(int i =0; i<clothes.length;i++) {
        	String key = clothes[i][1]; 
        	hm.put(key, hm.getOrDefault(key, 0)+1);
        }
        
        for(String key : hm.keySet()) {
        	answer *= hm.get(key)+1;
        }
        answer -= 1;
        
        return answer;
    }
}




해쉬맵에서 밸류만 따로 꺼낸것을 iterator화 시켜서 경우의 수 계산한 답:


import java.util.*;
class Solution {
    public int solution(String[][] clothes) {
        int answer = 1;
        
        HashMap<String, Integer> hm = new HashMap<>();
        
        for(int i =0; i<clothes.length;i++) {
        	String key = clothes[i][1]; 
        	hm.put(key, hm.getOrDefault(key, 0)+1);
        }
        
        Iterator<Integer> iter = hm.values().iterator();
        
        while(iter.hasNext()) {
        	answer *= iter.next()+1;
        }
        
        answer -=1;
        
        return answer;
    }
}





























################################################################################################################
예제6)stack 문제 
	-arraylist 활용필요(메모리 신경안쓸거면 굳이 안써도 되긴함)


1)기능개발

프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
입출력 예
progresses	speeds	return
[93, 30, 55]	[1, 30, 5]	[2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]
입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

※ 공지 - 2020년 7월 14일 테스트케이스가 추가되었습니다.


class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42586
################################################################################################################






답:



import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i=progresses.length-1;i>=0;i--) {
        	int day = ((100 - progresses[i]) / speeds[i]) + 
        	(((100-progresses[i]) % speeds[i]) > 0 ? 1:0);
        	stack.push(day);
        }
        
        List<Integer> list = new ArrayList<>();
        
        while(!stack.isEmpty()) {
        	int top = stack.pop();
        	int count = 1;
        	
        	while(!stack.isEmpty() && top>= stack.peek()) {
        		count++;
        		stack.pop();
        	}

        	list.add(count);
        }
        
        answer = new int[list.size()];
        
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}































################################################################################################################
예제7)Queue 
	

1)프린터

일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.

내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.

현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.

제한사항
현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
입출력 예
priorities	location	return
[2, 1, 3, 2]	2	1
[1, 1, 9, 1, 1, 1]	0	5
입출력 예 설명
예제 #1

문제에 나온 예와 같습니다.

예제 #2

6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.

출처


class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42587
################################################################################################################






답:







import java.util.*;
class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        Queue<Integer> queue = new LinkedList<>();
        
        for(int i=0;i<priorities.length;i++) {
        	queue.offer(priorities[i]); 
        }
        
        Arrays.sort(priorities);        
        int l = location;
        int size = priorities.length-1;
        
        while(!queue.isEmpty()) {
        	int i = queue.poll();
        	if(i==priorities[size-answer]) {
        		answer++;
        		l--;
        		if(l<0) {
        			break;
        		}
        	} else {
        		queue.offer(i);
        		l--;
        		if(l<0) {
        			l = size-answer;
        		}
        	}
        }
        
        return answer;
    }
}





















################################################################################################################
예제8)Queue 
	

1)다리를 지나는 트럭
트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

경과 시간	다리를 지난 트럭	다리를 건너는 트럭	대기 트럭
0	[]	[]	[7,4,5,6]
1~2	[]	[7]	[4,5,6]
3	[7]	[4]	[5,6]
4	[7]	[4,5]	[6]
5	[7,4]	[5]	[6]
6~7	[7,4,5]	[6]	[]
8	[7,4,5,6]	[]	[]
따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

제한 조건
bridge_length는 1 이상 10,000 이하입니다.
weight는 1 이상 10,000 이하입니다.
truck_weights의 길이는 1 이상 10,000 이하입니다.
모든 트럭의 무게는 1 이상 weight 이하입니다.
입출력 예
bridge_length	weight	truck_weights	return
2	10	[7,4,5,6]	8
100	100	[10]	101
100	100	[10,10,10,10,10,10,10,10,10,10]	110
출처

※ 공지 - 2020년 4월 06일 테스트케이스가 추가되었습니다.



class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42583
################################################################################################################






답:





import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();
        
        
        int sum = 0;
        
        for(int i=0;i<truck_weights.length;i++) {
        	int truck = truck_weights[i];
        	
        	while(true) {
        		if(que.isEmpty()) {
        			que.offer(truck);
        			sum += truck;
        			answer++;
        			break;
        		}else if(que.size()==bridge_length) {
        			sum -= que.poll(); 
        			System.out.println(sum);
        			System.out.println(que.peek());
        		}else {
        			if(sum+truck <= weight) {////////////여기서왜 queue.peek()+truck하면 안될까????
					//이해함!!!! 지금 다리에 2대만 올라갈수있다고 가정하고
//보니까 이렇게 생각되는건데 다리에 최대 100대가능하다 가정하고 100대다찼을때 하나빼면 99대이고 
//sum에서 그 빠진 한대의 무게만 빠져서(모든무게가 10이라가정하면) 990이 되는거임
//99대에서 queue.peek()를 하면 10이 나오고 sum을하면 990이 나오니까~~~~당연~~~~히 sum을 써야한다!
        				que.offer(truck);
        				sum+= truck;
        				answer++;
        				break;
        			}else {
        				que.offer(0);
        				answer++;
        			}
        		}
        	}
        }
        
         
        return answer+bridge_length;
    }
}















































































21.10.17_3회차
===============================================================================
*stack(주식), heap(맵게)
===============================================================================








































































################################################################################################################
예제9) 스택 & loop문
	

1)주식가격
초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.

제한사항
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
prices의 길이는 2 이상 100,000 이하입니다.
입출력 예
prices	return
[1, 2, 3, 2, 3]	[4, 3, 1, 1, 0]
입출력 예 설명
1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.
2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.
3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.
4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.
5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.
※ 공지 - 2019년 2월 28일 지문이 리뉴얼되었습니다.


class Solution {
    public int[] solution(int[] prices) {
        int[] answer = {};
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42584
################################################################################################################






loop문 답:

import java.util.*;
class Solution {
    public int[] solution(int[] prices) {
        
        int len = prices.length; 
        int[] answer = new int[len];
        
        for(int i=0;i<len-1;i++) {
        	for(int j=i+1;j<len;j++) {
        		answer[i]++;
        		if(prices[i]>prices[j]) {
        			break;
        		}
        	}
        }
        
        return answer;
    }
}





stack 답:

import java.util.*;
class Solution {
    public int[] solution(int[] prices) {
        
    	int len = prices.length;
    	int[] answer  = new int[len];
    	
    	Stack<Integer> stack = new Stack<>();
    	
    	int i=0;
    	stack.push(i);
    	
    	for(i=1;i<len;i++) {
    		
    		while(!stack.isEmpty() && prices[stack.peek()] > prices[i]) {
    			int idx = stack.pop();
    			answer[idx] = i - idx; 
    		}
    		
    		stack.push(i);
    	}
    	
        int size  = stack.size();
    	for(int j=0;j<size;j++) {
    		int idx = stack.pop();
    		answer[idx] = i - idx -1; 
    	}
/* 이렇게하면 size는 굳이 안만들어도됨. 위에는 정확히알고 거기까지 넣는거고 while은그냥 바닥날때까지넣는거
        while (!beginIdxs.empty()) {
            int beginIdx = beginIdxs.pop();
            terms[beginIdx] = i - beginIdx - 1;
        }
*/        
        return answer;
    }
}
























################################################################################################################
예제10) heap(우선 큐)
	

1)더 맵게
매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)
Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

제한 사항
scoville의 길이는 2 이상 1,000,000 이하입니다.
K는 0 이상 1,000,000,000 이하입니다.
scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
입출력 예
scoville	K	return
[1, 2, 3, 9, 10, 12]	7	2
입출력 예 설명
스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5
가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]

스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13
가진 음식의 스코빌 지수 = [13, 9, 10, 12]

모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.



class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42626
################################################################################################################



답:





import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        
        
        int len = scoville.length;
        
        
        Queue<Integer> que = new PriorityQueue<>();
        
        
        for(int i=0;i<len;i++) {
        	que.offer(scoville[i]);
        }
        
        while(que.peek()<K) {
        	if(que.size()==1) return -1;
        	
        	que.offer(que.poll()+(que.poll()*2));
        	answer++;
        }
        System.out.println(que.toString());
        System.out.println(answer);
        return answer;
    }


}










































21.10.18_4회차
===============================================================================
*정렬(k번째 수_copyOfRange(), 가장 큰 수_Comparator,익명클래스)
===============================================================================















































################################################################################################################
예제11) 정렬

1)k번째 수
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.

출처


class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42748
################################################################################################################


copyOfRange 학습후 답:

import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
       
        int commandLen = commands.length;
        answer = new int[commandLen];
        
        
        for(int i=0;i<commandLen;i++) {
        	int[] tmp = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
        	Arrays.sort(tmp);
        	
        	answer[i] = tmp[commands[i][2]-1];
        }

        return answer;
    }
}



copyOfRange 몰랐을때 답:

import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
        
        int len = array.length;
        answer = new int[commands.length];
        
        for(int j=0;j<commands.length;j++) {
        	int j2 = 0;
        	int[] tmp = new int[commands[j][1]-commands[j][0]+1];
        	for(int i=commands[j][0]-1;i<commands[j][1];i++) {
        		tmp[j2] = array[i];
        		j2++;
        	}
        	//System.out.println(Arrays.toString(tmp));
        	Arrays.sort(tmp);
        	//System.out.println(Arrays.toString(tmp));
        	answer[j] = tmp[commands[j][2]-1];	
        }
        
        //System.out.println(Arrays.toString(answer));
        return answer;
    }
}










################################################################################################################
예제12)정렬

1)가장 큰 수
0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.

예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.

0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.

제한 사항
numbers의 길이는 1 이상 100,000 이하입니다.
numbers의 원소는 0 이상 1,000 이하입니다.
정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.
입출력 예
numbers	return
[6, 10, 2]	"6210"
[3, 30, 34, 5, 9]	"9534330" 
	
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42746
################################################################################################################


답:




import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        
        int len = numbers.length;
        
        String[] str = new String[len];
        
        for(int i=0;i<len;i++) {
        	str[i] = String.valueOf(numbers[i]);
        }
        
        System.out.println(Arrays.toString(str));
        Arrays.sort(str, comp);
        System.out.println(Arrays.toString(str));
                
        if(str[0].equals("0")) return "0";
        
        for(int i=0;i<len;i++) {
        	answer += str[i];
        }
        System.out.println(answer);
        
        
        return answer;
    }
    
    public static Comparator<String> comp = new Comparator<String>(){
    	public int compare(String a, String b) {
    		return (b+a).compareTo(a+b);
    	}
    };
}























































21.10.19_5회차
===============================================================================
*정렬(H-INDEX), 완전탐색(모의고사,소수찾기)
===============================================================================




















































################################################################################################################
예제13)정렬

1)H-Index

H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과1에 따르면, H-Index는 다음과 같이 구합니다.

어떤 과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면 h의 최댓값이 이 과학자의 H-Index입니다.

어떤 과학자가 발표한 논문의 인용 횟수를 담은 배열 citations가 매개변수로 주어질 때, 이 과학자의 H-Index를 return 하도록 solution 함수를 작성해주세요.

제한사항
과학자가 발표한 논문의 수는 1편 이상 1,000편 이하입니다.
논문별 인용 횟수는 0회 이상 10,000회 이하입니다.
입출력 예
citations	return
[3, 0, 6, 1, 5]	3
입출력 예 설명
이 과학자가 발표한 논문의 수는 5편이고, 그중 3편의 논문은 3회 이상 인용되었습니다. 그리고 나머지 2편의 논문은 3회 이하 인용되었기 때문에 이 과학자의 H-Index는 3입니다.

※ 공지 - 2019년 2월 28일 테스트 케이스가 추가되었습니다.

class Solution {
    public int solution(int[] citations) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42747
################################################################################################################



답:


import java.util.*;

class Solution {
    public int solution(int[] citations) {
        int answer = 0;
        
        int len = citations.length;
        Arrays.sort(citations);
        for(int i=0;i<len;i++) {
        	int h = len-i;
        	if(citations[i]>=h) {
        		answer = h;
        		break;
        	}
        }
        
        
        return answer;
    }
}













################################################################################################################
예제14)완전탐색

1)모의고사(수포자)
수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.

1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...

1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한 조건
시험은 최대 10,000 문제로 구성되어있습니다.
문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.
입출력 예
answers	return
[1,2,3,4,5]	[1]
[1,3,2,4,2]	[1,2,3]
입출력 예 설명
입출력 예 #1

수포자 1은 모든 문제를 맞혔습니다.
수포자 2는 모든 문제를 틀렸습니다.
수포자 3은 모든 문제를 틀렸습니다.
따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.

입출력 예 #2

모든 사람이 2문제씩을 맞췄습니다.

class Solution {
    public int[] solution(int[] answers) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42840
################################################################################################################



답:




import java.util.*;

class Solution {
    public int[] solution(int[] answers) {
        int[] answer = {};
        
        int[] person1 = {1,2,3,4,5};
        int[] person2 = {2,1,2,3,2,4,2,5};
        int[] person3 = {3,3,1,1,2,2,4,4,5,5};
        
        int[] ok = new int[3];
        
        for(int i=0;i<answers.length;i++) {
        	if(person1[i%person1.length] == answers[i]) ok[0]++; 
        	if(person2[i%person2.length] == answers[i]) ok[1]++; 
        	if(person3[i%person3.length] == answers[i]) ok[2]++; 
        }
        
        int max = Math.max(Math.max(ok[0], ok[1]), ok[2]);
        
        List<Integer> list = new ArrayList<Integer>();
        
        if(ok[0]==max) list.add(1);
        if(ok[1]==max) list.add(2);
        if(ok[2]==max) list.add(3);
        
        int size = list.size();
        
        answer = new int[size];
        for(int i=0;i<size;i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}

















################################################################################################################
예제15)완전탐색

1)소수 찾기

한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
입출력 예
numbers	return
"17"	3
"011"	2
입출력 예 설명
예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.
출처





class Solution {
    public int solution(String numbers) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42839
################################################################################################################



답:






import java.util.*;

class Solution {
	
	
	public List<Integer> list = new ArrayList<>();
	public boolean[] check = new boolean[7];
	public int answer = 0;
	
	public void rec(String n, String temp, int len) {
		
		if(temp.length()==len) {
			if(!list.contains(Integer.parseInt(temp))) list.add(Integer.parseInt(temp));
			return;
		}
		
		for(int i=0;i<n.length();i++) {
			if(check[i]) continue;
			
			temp += n.charAt(i);			
			check[i] = true;
			rec(n, temp, len);
			
			check[i] = false;
			temp = temp.substring(0, temp.length()-1);
		}
		
	}
	
	public void calc(int num) {
		if(num==0) return;
		if(num==1) return;
		
		for(int i=2;i<num;i++) {
			if(num%i==0) return;
		}
		
		answer++;
	}
	
    public int solution(String numbers) {
    	String temp = "";
        int len = numbers.length();
        for(int i=1;i<=len;i++) {
        	rec(numbers, temp, i);
        }
        
        
        for(int i=0;i<list.size();i++) {
        	calc(list.get(i));
        }
        
        return answer;
    }
}












































21.10.20_6회차
===============================================================================
*완전탐색(카펫),그리디_탐욕법(체육복)
===============================================================================









































################################################################################################################
예제16)완전탐색

1)카펫

Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.

carpet.png

Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.

Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.
입출력 예
brown	yellow	return
10	2	[4, 3]
8	1	[3, 3]
24	24	[8, 6]
출처

※ 공지 - 2020년 2월 3일 테스트케이스가 추가되었습니다.
※ 공지 - 2020년 5월 11일 웹접근성을 고려하여 빨간색을 노란색으로 수정하였습니다.

class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = {};
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/42842
################################################################################################################



내가 수정한답:
class Solution {
    public int[] solution(int brown, int yellow) {
  
        int sum = brown + yellow;
        for(int i=3;i<=sum;i++) {
        	
        	if(sum%i==0) {        		
        		int col = sum/i;
        		int row = i; //i가 약수임이 증명이 된이상 sum에서 i로 나누면 약수의 쌍에서 큰값이 몫이되고 나눈 i값이 자동으로 남은 작은 값이 됨
        		
        		if((col-2)*(row-2) == yellow){ // 위처럼 값을넣으면 약수의 쌍에서 큰값이 가로로 들어가고 작은값이 세로로들어감 물론 세로가 커지는 경우도 나중엔 나오지만 그전에 끝나기때문에
								//아래처럼 col>=row를 해줄필요가 없음
        			return new int[] {col, row}; 
        		}
        	}
        	
        }
        
         return new int[0]; //사실상 의미가 없는거임 if외에 return을 넣어줘야하기때문에 필요할뿐
    }
}




다른사람 답:
class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = {};
        int sum = brown + yellow;
        for(int i=3;i<=sum;i++) {
        	
        	if(sum%i==0) {        		
        		int col = sum/i;
        		int row = sum/col;
        		
        		if((col-2)*(row-2) == yellow && col>=row){
        			return new int[] {col, row}; 
        		}
        	}
        	
        }
        
        return answer;
    }
}
































################################################################################################################
예제17)그리디_탐욕법

1)체육복

점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 
학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 
4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.

전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 
체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.

제한사항
전체 학생의 수는 2명 이상 30명 이하입니다.
체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.
입출력 예
n	lost	reserve	return
5	[2, 4]	[1, 3, 5]	5
5	[2, 4]	[3]	4
3	[3]	[1]	2
입출력 예 설명
예제 #1
1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.

예제 #2
3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.

출처

※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.
※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.
※ 공지 - 2021년 7월 28일 테스트케이스가 추가되었습니다.
※ 공지 - 2021년 8월 30일 테스트케이스가 추가되었습니다.

class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        int answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/42862
################################################################################################################





최초 답:




import java.util.*;

class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        int answer = n - lost.length;
        

        
        Map<Integer, Boolean> hmR = new HashMap<>();
        Arrays.sort(lost);//여기서 정렬안하면 
        //1은 2가져가고 3은 4가져가면 딱인데 이러면 3이 먼저 2가져가서
        //1은 못가져가게되는 경우가 생김 그래서 정렬해서 각자
        //앞에서부터 가져가는 상황을 만들어야함
        //lost:3,1,6 reserve:2,4
        
        for(int i=0;i<reserve.length;i++) {
        	hmR.put(reserve[i], true);
        }
        
        for(int i=0;i<lost.length;i++) {
        	if(hmR.containsKey(lost[i])) {
        		hmR.put(lost[i], false);
        		lost[i] = -1; //밑에랑 다르게 여긴해야함
                        //2번학생이 잃어버리고 여분도있다했을때
                //2번 학생의 여분은 false가 되고 2번 학생의
                //값을 유의미하게 2 그대로 나두면 아래에서 2번이 1번은false
                //라서 못가져가고 3번을 가져감 그럼 4번학생이 
                //3번학생한테 빌려야하는데 못빌림 즉 2번이 혼자
                //2개를 빌리는것과 같음
                //lost:2,4 reserve:1,3이라가정
        		answer++;
        	}
        }
        
        for(int i=0;i<lost.length;i++) {
        	for(int num : hmR.keySet()) {
        		if(lost[i]-1 == num) {
        			if(hmR.get(num)) {     
        				hmR.put(num, false);
                        //lost[i] = -1; 여긴할필요없음 밑에 주석도마찬가지
        				answer++;
        				break;
        			}
        		} else if(lost[i]+1 == num) {
        			if(hmR.get(num)) {     
        				hmR.put(num, false);
                        //lost[i] = -1;
        				answer++;
        				break;
        			}        			
        		} 
        	}
        }
        
        return answer;
    }
}




복습하면서 생각한 답(이중포문사용하지 않는다, 해쉬를 극한으로 사용):

import java.util.*;

class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
    	int len = lost.length;
        int answer = n-len;
        
        Arrays.sort(lost);
        Map<Integer, Boolean> hm = new HashMap<>();
        for(int i=0;i<reserve.length;i++) {
        	hm.put(reserve[i], true);
        }
        
        for(int i=0;i<len;i++) {
        	if(hm.containsKey(lost[i])) {
        		answer++;
        		hm.put(lost[i], false);
                	lost[i] = -1;
        	}
        }
        
        for(int i=0;i<len;i++) {
        	if(hm.containsKey(lost[i]-1)) {
        		if(hm.get(lost[i]-1)) {
        			answer++;
        			hm.put(lost[i]-1, false);
        			continue;
        		}
        	} 
        	
        	if(hm.containsKey(lost[i]+1)) {
        		if(hm.get(lost[i]+1)) {
        			answer++;
        			hm.put(lost[i]+1, false);
        			continue;
        		}
        	}
        	
        }
        
        
        return answer;
    }
}




























































21.10.21_7회차
===============================================================================
*그리디_탐욕법(조이스틱)
===============================================================================

































































################################################################################################################
예제18)그리디_탐욕법

1)조이스틱


조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA

조이스틱을 각 방향으로 움직이면 아래와 같습니다.

▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동
예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.

- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.

제한 사항
name은 알파벳 대문자로만 이루어져 있습니다.
name의 길이는 1 이상 20 이하입니다.
입출력 예
name	return
"JEROEN"	56
"JAN"	23
출처

※ 공지 - 2019년 2월 28일 테스트케이스가 추가되었습니다.



class Solution {
    public int solution(String name) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42860
################################################################################################################


답:


class Solution {
    public int solution(String name) {
        int answer = 0;
        
        
       int len = name.length();
       
       int minLen = len -1; 
       
       for(int i=0;i<len;i++) {
    	   
    	   answer += Math.min(name.charAt(i)-'A', 'Z'-name.charAt(i)+1);
    	   
    	   int nextIdx = i+1;
    	   
    	   while(nextIdx<len&&name.charAt(nextIdx)=='A') {
    		   nextIdx++;
    	   }
    	   
    	   minLen = Math.min(minLen, i*2+1+(len-1-nextIdx));
    	   //이걸 간단하게하면 Math.min(minLen, i*2+(len-nextIdx));

		//위코드가 적혀야하는 이유 케이스: BBAAABB 
       }
   
        answer += minLen;

        return answer;
    }
}
































































21.10.22_8회차
===============================================================================
*그리디_탐욕법(큰 수 만들기)
===============================================================================



































































################################################################################################################
예제19)그리디_탐욕법

1)큰 수 만들기
어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.

예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.

문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.

제한 조건
number는 1자리 이상, 1,000,000자리 이하인 숫자입니다.
k는 1 이상 number의 자릿수 미만인 자연수입니다.
입출력 예
number	k	return
"1924"	2	"94"
"1231234"	3	"3234"
"4177252841"	4	"775841"
출처


https://programmers.co.kr/learn/courses/30/lessons/42883

class Solution {
    public String solution(String number, int k) {
        String answer = "";
        return answer;
    }
}


아래 케이스 참고하여 12번 에러나는게 뭔지확인해라

"1000", 1 -> "100" 

	-이경우 아래 답에서 stack에는 4자리가 들어가게된다. 그래서 stack.size()를 하면안되고
		실제 길이 - k를 해서 마지막 스택값은 무시한다.
################################################################################################################


답:

stack의 LIFO를 이용한 방식의 답:
import java.util.Stack;

class Solution {
    public String solution(String number, int k) {
        
    	char[] result = new char[number.length()-k];
        
        String answer = "";
        
        Stack<Character> stack = new Stack<>();
        
        for(int i=0;i<number.length();i++) {
        	
        	while(!stack.isEmpty()&&stack.peek()<number.charAt(i)&&k-->0) {
        		stack.pop();
        	}
        	
        	stack.push(number.charAt(i));
        }
        
//        System.out.println("stack 갯수 : "+stack.size());
//        System.out.println("stack 원소 : " + stack.toString());
//        System.out.println(number.length()-k);
//        System.out.println(number.length());
//        System.out.println(k);
//        System.out.println();
//        System.out.println("result 갯수 : "+result.length);
//        
        
      
        for(int i=0;i<result.length;i++) {
        	result[i] = stack.get(i);
        }
        
        answer = new String(result);
        
        return answer;
    }
}

//테스트 9 〉	통과 (9023.40ms, 376MB)
//테스트 10 〉	통과 (5466.03ms, 399MB)


//테스트 9 〉	통과 (40.96ms, 98MB) 위에껀 마지막 for문에 answer += stack.get(i)한거
							//엄청느림
//테스트 10 〉	통과 (52.74ms, 103MB) //지금처럼 answer라는 문자열에 들어가야할 갯수만안다면
	//char배열로 받아서 그걸 string에 넣는 전통적인 방식을 택하는게 좋음







StringBuilder를 이용한 시간단축답(안좋은방식):

class Solution {
    public StringBuilder solution(String number, int k) {
        
        
        StringBuilder answer = new StringBuilder();
        
        int len = number.length()-k;
        int idx = 0;
        for(int i=0;i<len;i++) {
        	char max = '0';
        	for(int j=idx;j<=k+i;j++) {
        		if(max<number.charAt(j)) {
        			max = number.charAt(j);
        			idx = j+1;
        		}
        	}
        	answer.append(max);
        }
        
        return answer;
    }
}










































































21.10.23_9회차
===============================================================================
*그리디_탐욕법(구명보트), 깊이우선탬색(DFS)
===============================================================================

































































################################################################################################################
예제20)그리디_탐욕법

1)구명보트

무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.

구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.

사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.
입출력 예
people	limit	return
[70, 50, 80, 50]	100	3
[70, 80, 50]	100	3

히든케이스: 40,50,150,160 limit 200 > 2
	-처음 작은 몸무게의 사람들기준으로 비교해서 태우면 안된다는 반증
	100,500,500,900,950 limit 1000 > 3
	-가장 처음의 값과 마지막부터 감소한 인덱스들의 값들을 더한것들이 limit보다 클시
		그사람들부터 태워가야한다는 예시



class Solution {
    public int solution(int[] people, int limit) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42885
################################################################################################################


답:





import java.util.*;

class Solution {
    public int solution(int[] people, int limit) {
        int answer = 0;
        
        Arrays.sort(people);
        int len = people.length-1;
        
        for(int i=0;i<=len;i++) {
        	while(len>i&&people[i]+people[len--] > limit) {
        		answer++;
        	}
        	answer++;
        }
     
        return answer;
    }
}













################################################################################################################
예제21)깊이 우선탐색(DFS)

1)아래 링크에 들어가서 나온 그래프대로 이루어지도록 dfs 를 구현하라

https://codingnojam.tistory.com/44


package practice;
import java.util.*;

class MainClass{
	static int[][] graph = {{}, {2,3,8}, {1,6,8}, {1,5}, {5,7}, {3,4,7}, {2}, {4,5}, {1,2}};
	
    public static void main(String[] args) {
        dfs(1);  
     }
}

################################################################################################################


답:


package study.blog.codingnojam;
public class Study_DFS_Recursion {
	// 방문처리에 사용 할 배열선언
	static boolean[] vistied = new boolean[9];
	// 그림예시 그래프의 연결상태를 2차원 배열로 표현
	// 인덱스가 각각의 노드번호가 될 수 있게 0번인덱스는 아무것도 없는 상태라고 생각하시면됩니다.
	static int[][] graph = {{}, {2,3,8}, {1,6,8}, {1,5}, {5,7}, {3,4,7}, {2}, {4,5}, {1,2}};
	public static void main(String[] args) {
		dfs(1);
	}
	static void dfs(int nodeIndex) {
		// 방문 처리
		vistied[nodeIndex] = true;
		// 방문 노드 출력
		System.out.print(nodeIndex + " -> ");
		// 방문한 노드에 인접한 노드 찾기
		for (int node : graph[nodeIndex]) {
		// 인접한 노드가 방문한 적이 없다면 DFS 수행
			if(!vistied[node]) {
				dfs(node);
			}
		}
	}
}

출처: https://codingnojam.tistory.com/44 [코딩은 알면 know jam! 모르면 no jam!]











################################################################################################################
예제22)깊이 우선탐색(DFS)

1)타겟넘버
n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
각 숫자는 1 이상 50 이하인 자연수입니다.
타겟 넘버는 1 이상 1000 이하인 자연수입니다.
입출력 예
numbers	target	return
[1, 1, 1, 1, 1]	3	5
입출력 예 설명
문제에 나온 예와 같습니다.

class Solution {
    public int solution(int[] numbers, int target) {
        int answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/43165
################################################################################################################


답:




class Solution {
	int answer = 0;
	
	public void dfs(int[] numbers, int depth, int target, int result) {
		if(depth == numbers.length) {
			if(target==result) {
				answer++;
			}
			return;
		}
		
		int add = result + numbers[depth];
		int sub = result - numbers[depth];
		
		dfs(numbers, depth+1, target, add);
		dfs(numbers, depth+1, target, sub);
	}
	
    public int solution(int[] numbers, int target) {
        
        
        dfs(numbers, 0, target, 0);
        
        return answer;
    }
}










































































21.10.28_14회차
===============================================================================
*행렬테두리회전
===============================================================================




































































#########################################################################################
예제23)시뮬레이션

1)행렬 테두리 회전하기

rows x columns 크기인 행렬이 있습니다. 행렬에는 1부터 rows x columns까지의 숫자가 한 줄씩 순서대로 적혀있습니다. 이 행렬에서 직사각형 모양의 범위를 여러 번 선택해, 테두리 부분에 있는 숫자들을 시계방향으로 회전시키려 합니다. 각 회전은 (x1, y1, x2, y2)인 정수 4개로 표현하며, 그 의미는 다음과 같습니다.

x1 행 y1 열부터 x2 행 y2 열까지의 영역에 해당하는 직사각형에서 테두리에 있는 숫자들을 한 칸씩 시계방향으로 회전합니다.
다음은 6 x 6 크기 행렬의 예시입니다.

grid_example.png

이 행렬에 (2, 2, 5, 4) 회전을 적용하면, 아래 그림과 같이 2행 2열부터 5행 4열까지 영역의 테두리가 시계방향으로 회전합니다. 이때, 중앙의 15와 21이 있는 영역은 회전하지 않는 것을 주의하세요.

rotation_example.png

행렬의 세로 길이(행 개수) rows, 가로 길이(열 개수) columns, 그리고 회전들의 목록 queries가 주어질 때, 각 회전들을 배열에 적용한 뒤, 그 회전에 의해 위치가 바뀐 숫자들 중 가장 작은 숫자들을 순서대로 배열에 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
rows는 2 이상 100 이하인 자연수입니다.
columns는 2 이상 100 이하인 자연수입니다.
처음에 행렬에는 가로 방향으로 숫자가 1부터 하나씩 증가하면서 적혀있습니다.
즉, 아무 회전도 하지 않았을 때, i 행 j 열에 있는 숫자는 ((i-1) x columns + j)입니다.
queries의 행의 개수(회전의 개수)는 1 이상 10,000 이하입니다.
queries의 각 행은 4개의 정수 [x1, y1, x2, y2]입니다.
x1 행 y1 열부터 x2 행 y2 열까지 영역의 테두리를 시계방향으로 회전한다는 뜻입니다.
1 ≤ x1 < x2 ≤ rows, 1 ≤ y1 < y2 ≤ columns입니다.
모든 회전은 순서대로 이루어집니다.
예를 들어, 두 번째 회전에 대한 답은 첫 번째 회전을 실행한 다음, 그 상태에서 두 번째 회전을 실행했을 때 이동한 숫자 중 최솟값을 구하면 됩니다.
입출력 예시
rows	columns	queries	result
6	6	[[2,2,5,4],[3,3,6,6],[5,1,6,3]]	[8, 10, 25]
3	3	[[1,1,2,2],[1,2,2,3],[2,1,3,2],[2,2,3,3]]	[1, 1, 5, 3]
100	97	[[1,1,100,97]]	[1]

class Solution {
    public int[] solution(int rows, int columns, int[][] queries) {
        int[] answer = {};
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/77485
#########################################################################################




답:



import java.util.*;

class Solution {
	static int[][] map;
	
	public int rotation(int sx, int sy, int ex, int ey) {
		int min = Integer.MAX_VALUE;
		int next = 0;
		int before = 0;
		
    
		next = map[sx][ey];
		for(int i=ey;i>sy;i--) {
			map[sx][i] = map[sx][i-1];
		}
		
		before = next;
		next = map[ex][ey];
		for(int i=ex;i>sx+1;i--) {
			map[i][ey] = map[i-1][ey]; 
		}
		
		map[sx+1][ey] = before;
		
		
		before = next;
		next = map[ex][sy];
		for(int i=sy;i<ey-1;i++) {
			map[ex][i] = map[ex][1+i];
		}
		map[ex][ey-1] = before;
		
        for(int i=sx;i<ex-1;i++){
            map[i][sy] = map[i+1][sy];
        }
        map[ex-1][sy] = next;
        
        for(int i=sy;i<ey+1;i++){
            min = Math.min(min, map[sx][i]);
            min = Math.min(min, map[ex][i]);
        }
        
        for(int i=sx;i<ex+1;i++){
            min = Math.min(min, map[i][sy]);
            min = Math.min(min, map[i][ey]);
        }
        
		return min;
	}
	
    public int[] solution(int rows, int columns, int[][] queries) {
        int[] answer = new int[queries.length];
        map = new int[rows][columns];
        
        int count = 1;
        
        for(int i=0;i<rows;i++) {
        	for(int j=0;j<columns;j++) {
        		map[i][j] = count++;
        	}
        }
        
        
        for(int i=0;i<queries.length;i++) {
        	answer[i] = rotation(queries[i][0]-1, queries[i][1]-1, queries[i][2]-1, queries[i][3]-1);
        }
        
        return answer;
    }
}

























































21.10.29_15회차
===============================================================================
*프로그래머스 레벨 1 연습문제(~제일 작은 수 제거하기)
===============================================================================























































#########################################################################################
예제24)연습문제

1)직사각형 별찍기
이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.
별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요.

import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();

        System.out.println(a + b);
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12969
#########################################################################################




답:

import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();

        
        
        for(int i=0;i<b;i++) {
        	for(int j=0;j<a;j++) {
        		System.out.print('*');
        	}
        	System.out.println();
        }
    }
}


















#########################################################################################
예제25)연습문제

1)x만큼 간격이 있는 n개의 숫자

함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.

제한 조건
x는 -10000000 이상, 10000000 이하인 정수입니다.
n은 1000 이하인 자연수입니다.
입출력 예
x	n	answer
2	5	[2,4,6,8,10]
4	3	[4,8,12]
-4	2	[-4, -8]



class Solution {
    public long[] solution(int x, int n) {
        long[] answer = {};
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12954
#########################################################################################




답:




import java.util.*;

class Solution {
    public long[] solution(int x, int n) {
        long[] answer = new long[n];
        
        
        
        for(long i=1;i<=n;i++) {
        	answer[(int)i-1] = (x*i);
        }
        
        return answer;
    }
}


















#########################################################################################
예제26)연습문제

1)행렬의 덧셈


행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.

제한 조건
행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다.
입출력 예
arr1	arr2	return
[[1,2],[2,3]]	[[3,4],[5,6]]	[[4,6],[7,9]]
[[1],[2]]	[[3],[4]]	[[4],[6]]

class Solution {
    public int[][] solution(int[][] arr1, int[][] arr2) {
        int[][] answer = {};
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12950
#########################################################################################




답:








class Solution {
    public int[][] solution(int[][] arr1, int[][] arr2) {
        int[][] answer = new int[arr1.length][arr1[0].length];
        
        for(int i=0;i<arr1.length;i++) {
        	for(int j=0;j<arr1[0].length;j++) {
        		answer[i][j] = arr1[i][j] + arr2[i][j];
        	}
        }
        
        return answer;
    }
}
















#########################################################################################
예제27)연습문제

1)행렬의 덧셈


프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.
전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요.

제한 조건
s는 길이 4 이상, 20이하인 문자열입니다.
입출력 예
phone_number	return
"01033334444"	"*******4444"
"027778888"	"*****8888"


class Solution {
    public String solution(String phone_number) {
        String answer = "";
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12948
#########################################################################################




답:

class Solution {
    public String solution(String phone_number) {
        String answer = "";
        
        for(int i=0;i<phone_number.length()-4;i++) {
        	answer += '*';
        }
        
        answer += phone_number.substring(phone_number.length()-4);
        
        return answer;
    }
}



class Solution {
    public String solution(String phone_number) {
        String answer = "";
        
        char[] tmp = phone_number.toCharArray();
        
        for(int i=0;i<phone_number.length()-4;i++) {
        	tmp[i] = '*';
        }
      
        answer = new String(tmp);
        return answer;
    }
}



























#########################################################################################
예제28)연습문제

1)하샤드 수

양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다. 예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다. 자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.

제한 조건
x는 1 이상, 10000 이하인 정수입니다.
입출력 예
arr	return
10	true
12	true
11	false
13	false
입출력 예 설명
입출력 예 #1
10의 모든 자릿수의 합은 1입니다. 10은 1로 나누어 떨어지므로 10은 하샤드 수입니다.

입출력 예 #2
12의 모든 자릿수의 합은 3입니다. 12는 3으로 나누어 떨어지므로 12는 하샤드 수입니다.

입출력 예 #3
11의 모든 자릿수의 합은 2입니다. 11은 2로 나누어 떨어지지 않으므로 11는 하샤드 수가 아닙니다.

입출력 예 #4
13의 모든 자릿수의 합은 4입니다. 13은 4로 나누어 떨어지지 않으므로 13은 하샤드 수가 아닙니다.

class Solution {
    public boolean solution(int x) {
        boolean answer = true;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12947
#########################################################################################




답:



class Solution {
    public boolean solution(int x) {
        boolean answer = true;
        
        String str = String.valueOf(x);
        int tmp = 0;
        for(int i=0;i<str.length();i++) {
        	tmp += str.charAt(i) - 48;
        }
        
        if(x%tmp != 0) return false;
        
        return answer;
    }
}


















#########################################################################################
예제29)연습문제

1)평균 구하기

정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요.

제한사항
arr은 길이 1 이상, 100 이하인 배열입니다.
arr의 원소는 -10,000 이상 10,000 이하인 정수입니다.
입출력 예
arr	return
[1,2,3,4]	2.5
[5,5]	5


class Solution {
    public double solution(int[] arr) {
        double answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12944
#########################################################################################




답:


class Solution {
    public double solution(int[] arr) {
        double answer = 0;
        double sum = 0;
        for(int i=0;i<arr.length;i++) {
        	sum += arr[i];
        }
        
        answer = sum / arr.length;
        
        return answer;
    }
}
















#########################################################################################
예제30)연습문제

1)콜라츠 추측

1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다. 
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.

제한 사항
입력된 수, num은 1 이상 8000000 미만인 정수입니다.
입출력 예
n	result
6	8
16	4
626331	-1
입출력 예 설명
입출력 예 #1
문제의 설명과 같습니다.

입출력 예 #2
16 -> 8 -> 4 -> 2 -> 1 이되어 총 4번만에 1이 됩니다.

입출력 예 #3
626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.



class Solution {
    public int solution(int num) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12943
#########################################################################################




답:




class Solution {
    public int solution(int num) {
        int answer = 0;
        
        long number = num;
        while(answer<500) {
        	if(number==1) break;
        	if(number%2==0) number /= 2;
        	else number = number*3+1;
        	answer++;
        }
        
        if(answer==500) return -1;
        
        return answer;
    }
}
















#########################################################################################
예제31)연습문제(유클리드 호제법)

1)최대공약수와 최소공배수
두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

제한 사항
두 수는 1이상 1000000이하의 자연수입니다.
입출력 예
n	m	return
3	12	[3, 12]
2	5	[1, 10]
입출력 예 설명
입출력 예 #1
위의 설명과 같습니다.

입출력 예 #2
자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.


class Solution {
    public int[] solution(int n, int m) {
        int[] answer = {};
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12940
#########################################################################################




답:



import java.util.*;

class Solution {
	
	public int GCD(int a, int b) {
		if(a<b) {
			int tmp = a;
			a = b;
			b = tmp;
		}
		
		while(b!=0) {
			int n = a % b;
			a = b;
			b = n;
		}
		
		return a;
	}
	
    public int[] solution(int n, int m) {
        int[] answer = new int[2];
        
        
        answer[0] = GCD(n,m);
        answer[1] = (n*m) / GCD(n,m);
      
        
        return answer;
    }
}






















#########################################################################################
예제32)연습문제

1)짝수와 홀수

정수 num이 짝수일 경우 "Even"을 반환하고 홀수인 경우 "Odd"를 반환하는 함수, solution을 완성해주세요.

제한 조건
num은 int 범위의 정수입니다.
0은 짝수입니다.
입출력 예
num	return
3	"Odd"
4	"Even"



class Solution {
    public String solution(int num) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12937
#########################################################################################




답:








class Solution {
    public String solution(int num) {
        String answer = "";
        
        if(num%2==0) answer = "Even";
        else answer = "Odd";
        return answer;
    }
}


















#########################################################################################
예제33)연습문제

1)제일 작은 수 제거하기
정수를 저장한 배열, arr 에서 가장 작은 수를 제거한 배열을 리턴하는 함수, solution을 완성해주세요. 단, 리턴하려는 배열이 빈 배열인 경우엔 배열에 -1을 채워 리턴하세요. 예를들어 arr이 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10]면 [-1]을 리턴 합니다.

제한 조건
arr은 길이 1 이상인 배열입니다.
인덱스 i, j에 대해 i ≠ j이면 arr[i] ≠ arr[j] 입니다.
입출력 예
arr	return
[4,3,2,1]	[4,3,2]
[10]	[-1]



class Solution {
    public int[] solution(int[] arr) {
        int[] answer = {};
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12935
#########################################################################################




답(sort내장함수를사용한 결과):


import java.util.Arrays;

class Solution {
    public int[] solution(int[] arr) {
        int[] answer = new int[arr.length-1];
        
        
        if(arr.length == 1) return new int[] {-1};
        
        
        int[] tmp = Arrays.copyOf(arr, arr.length);
        Arrays.sort(tmp);        
        int min = tmp[0];
        
        int j = 0;
        for(int i=0;i<arr.length;i++) {
        	if(arr[i] == min) {
        		continue;
        	}
        	answer[j] = arr[i];        		
        	j++;
        }
        
        return answer;
    }
}





답(선택정렬을 이용한 답) :

class Solution {
    public int[] solution(int[] arr) {
        int[] answer = new int[arr.length-1];
        
        
        if(arr.length == 1) return new int[] {-1};
        
        int min = arr[0];
        int idx = 0;
        for(int i=1;i<arr.length;i++) {
        	if(arr[i] < min) {
        		min = arr[i];
        		idx = i;
        	}
        }
        
        int j = 0;
        for(int i=0;i<arr.length;i++) {
        	if(arr[i] == min) {
        		continue;
        	}
        	answer[j] = arr[i];        		
        	j++;
        }
        
        return answer;
    }
}







































































21.10.30_16회차
===============================================================================
*레벨1연습문제(~소수찾기)
===============================================================================





























































#########################################################################################
예제34)연습문제

1)정수 제곱근 판별

임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.

제한 사항
n은 1이상, 50000000000000 이하인 양의 정수입니다.
입출력 예
n	return
121	144
3	-1
입출력 예 설명
입출력 예#1
121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.

입출력 예#2
3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.


class Solution {
    public long solution(long n) {
        long answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12934
#########################################################################################




답:




class Solution {
    public long solution(long n) {
        long answer = 0;
        
        long sqrt = (long)Math.sqrt(n);
        
        if(n == Math.pow(sqrt, 2)) {
        	answer = (long)Math.pow(sqrt+1, 2);
        } else {
        	answer = -1;
        }
        
        return answer;
    }
}








#########################################################################################
예제35)연습문제

1)정수 내림차순으로 배치하기

함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 예를들어 n이 118372면 873211을 리턴하면 됩니다.

제한 조건
n은 1이상 8000000000 이하인 자연수입니다.
입출력 예
n	return
118372	873211


class Solution {
    public long solution(long n) {
        long answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12933
#########################################################################################




답:

import java.util.Arrays;

class Solution {
    public long solution(long n) {
        long answer = 0;
      
        String str = String.valueOf(n);
        int len = str.length();
        int[] num = new int[len];
           
        for(int i=0;i<len;i++) {
        	num[i] = str.charAt(i)-48;
        }
        
        Arrays.sort(num);
        
        
        String tmp = "";
        for(int i=len-1;i>=0;i--) {
        	tmp+=num[i];
        }
        
        answer = Long.valueOf(tmp);
        return answer;
    }
}



















#########################################################################################
예제36)연습문제

1)자연수 뒤집어 배열로 만들기

자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다.

제한 조건
n은 10,000,000,000이하인 자연수입니다.
입출력 예
n	return
12345	[5,4,3,2,1]



class Solution {
    public int[] solution(long n) {
        int[] answer = {};
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12932
#########################################################################################




답:





class Solution {
    public int[] solution(long n) {
        
        String str = Long.toString(n);
        int len = str.length();
        int[] answer = new int[len];
        
        int j = 0;
        for(int i=len-1;i>=0;i--) {
        	answer[j++] = str.charAt(i)-48;
        }
        
        return answer;
    }
}



















#########################################################################################
예제37)연습문제

1)자릿수 더하기
자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.
예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다.

제한사항
N의 범위 : 100,000,000 이하의 자연수
입출력 예
N	answer
123	6
987	24
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
9 + 8 + 7 = 24이므로 24를 return 하면 됩니다.



import java.util.*;

public class Solution {
    public int solution(int n) {
        int answer = 0;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}




https://programmers.co.kr/learn/courses/30/lessons/12931
#########################################################################################




답:




import java.util.*;

public class Solution {
    public int solution(int n) {
        int answer = 0;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");
        
        
        String str = Integer.toString(n);
        
        int len = str.length();
        
        for(int i=0;i<len;i++) {
        	answer += str.charAt(i)-48;
        }

        return answer;
    }
}




























#########################################################################################
예제38)연습문제

1)이상한 문자 만들기

문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.

제한 사항
문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.
첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.
입출력 예
s	return
"try hello world"	"TrY HeLlO WoRlD"
입출력 예 설명
"try hello world"는 세 단어 "try", "hello", "world"로 구성되어 있습니다. 각 단어의 짝수번째 문자를 대문자로, 홀수번째 문자를 소문자로 바꾸면 "TrY", "HeLlO", "WoRlD"입니다. 따라서 "TrY HeLlO WoRlD" 를 리턴합니다.



class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}




https://programmers.co.kr/learn/courses/30/lessons/12930
#########################################################################################




답:





class Solution {
    public String solution(String s) {
        String answer = "";
        int len = s.length();
        
        
        s = s.toLowerCase();
        int j=0;
        for(int i=0;i<len;i++) {
        	char ch = s.charAt(i);
        	if(ch == ' ') {
        		j=0;
        		answer += ch;
    			continue;
    		}
        
        	if(j++ % 2 == 0) {
        		answer += (char)(ch-32);        			
        	}else {       	
        		answer += ch;
        	}       		

        }
        
        return answer;
    }
}












#########################################################################################
예제39)연습문제

1)약수의 합
정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.

제한 사항
n은 0 이상 3000이하인 정수입니다.
입출력 예
n	return
12	28
5	6
입출력 예 설명
입출력 예 #1
12의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다.

입출력 예 #2
5의 약수는 1, 5입니다. 이를 모두 더하면 6입니다.




class Solution {
    public int solution(int n) {
        int answer = 0;
        return answer;
    }
}




https://programmers.co.kr/learn/courses/30/lessons/12928
#########################################################################################




답:




class Solution {
    public int solution(int n) {
        if(n==0) return 0;
    	
    	int answer = 0;
        
        for(int i=1;i<=n;i++) {
        	if(n%i==0) {
        		answer += i;
        	}
        }
        
        return answer;
    }
}


















#########################################################################################
예제40)연습문제

1)시저 암호
어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 "AB"는 1만큼 밀면 "BC"가 되고, 3만큼 밀면 "DE"가 됩니다. "z"는 1만큼 밀면 "a"가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

제한 조건
공백은 아무리 밀어도 공백입니다.
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.
s의 길이는 8000이하입니다.
n은 1 이상, 25이하인 자연수입니다.
입출력 예
s	n	result
"AB"	1	"BC"
"z"	1	"a"
"a B z"	4	"e F d"

class Solution {
    public String solution(String s, int n) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12926
#########################################################################################




답:




class Solution {
    public String solution(String s, int n) {
        StringBuilder answer = new StringBuilder();
        
        for(char ch : s.toCharArray()) {
        	if(Character.isUpperCase(ch)) {
        		answer.append((char)((ch+n-'A')%26+'A'));
        	}else if(Character.isLowerCase(ch)) {
        		answer.append((char)((ch+n-'a')%26+'a'));
        	} else {
        		answer.append(ch);
        	}
        }
        
        System.out.println(answer.toString());
        return answer.toString();
    }
}



















#########################################################################################
예제41)연습문제

1)문자열을 정수로 바꾸기
문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요.

제한 조건
s의 길이는 1 이상 5이하입니다.
s의 맨앞에는 부호(+, -)가 올 수 있습니다.
s는 부호와 숫자로만 이루어져있습니다.
s는 "0"으로 시작하지 않습니다.
입출력 예
예를들어 str이 "1234"이면 1234를 반환하고, "-1234"이면 -1234를 반환하면 됩니다.
str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다.

class Solution {
    public int solution(String s) {
        int answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12925
#########################################################################################




답:




class Solution {
    public int solution(String s) {
        int answer = 0;
        
         
        answer = Integer.parseInt(s);        	 
         
        
        return answer;
    }
}

















#########################################################################################
예제42)연습문제

1)수박수박수박수박수박수?
길이가 n이고, "수박수박수박수...."와 같은 패턴을 유지하는 문자열을 리턴하는 함수, solution을 완성하세요. 예를들어 n이 4이면 "수박수박"을 리턴하고 3이라면 "수박수"를 리턴하면 됩니다.

제한 조건
n은 길이 10,000이하인 자연수입니다.
입출력 예
n	return
3	"수박수"
4	"수박수박"


class Solution {
    public String solution(int n) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12922
#########################################################################################



답1:

class Solution {
    public String solution(int n) {
        String answer = "";
        
        
        answer = new String(new char[n/2+1]).replace("\0", "수박").substring(0, n);
        //char 배열은 유일하게 초기화안할시 null로 초기화된다. 그래서 그 널값을 수박으로 바꾸는것이다.
        return answer;
    }
}




답2:

class Solution {
    public String solution(int n) {
        String answer = "";
//        String str = "수박"; //주석 & ~주석 방식의 시간은 비슷하다
        char[] tmp = {'수', '박'};
        for(int i=0;i<n;i++) {
//        	answer += str.charAt(i%2);
        	answer += tmp[i%2];
        }
        
        return answer;
    }
}












#########################################################################################
예제43)연습문제

1)소수 찾기
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

제한 조건
n은 2이상 1000000이하의 자연수입니다.
입출력 예
n	result
10	4
5	3
입출력 예 설명
입출력 예 #1
1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환

입출력 예 #2
1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환

class Solution {
    public int solution(int n) {
        int answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12921
#########################################################################################



답:




class Solution {
    public int solution(int n) {
        int answer = 0;
        
        for(int i=2;i<=n;i++) {
        	boolean flag = true;
        	for(int j=2;j<=Math.sqrt(i);j++) {
        		if(i%j==0) {
        			flag = false;
        			break;
        		}
        	}
        	if(flag == true) answer++;
        }
        
        return answer;
    }
}






























































21.10.31_17회차
===============================================================================
*레벨1종료,레벨2(~JadenCase문자열만들기)
===============================================================================






















































#########################################################################################
예제44)연습문제

1)서울에서 김서방 찾기
String형 배열 seoul의 element중 "Kim"의 위치 x를 찾아, "김서방은 x에 있다"는 String을 반환하는 함수, solution을 완성하세요. seoul에 "Kim"은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.

제한 사항
seoul은 길이 1 이상, 1000 이하인 배열입니다.
seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.
"Kim"은 반드시 seoul 안에 포함되어 있습니다.
입출력 예
seoul	return
["Jane", "Kim"]	"김서방은 1에 있다"



class Solution {
    public String solution(String[] seoul) {
        String answer = "";
        
        
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12919
#########################################################################################



답:



class Solution {
    public String solution(String[] seoul) {
        String answer = "";
        
        if(seoul.length==1) return "김서방은 0에 있다"; 
        
        
        int idx = 0; 
        for(String person : seoul) {
        	if(person.equals("Kim")) {
        		break;
        	}
        	idx++;
        }
        
        answer = "김서방은 "+idx+"에 있다";
        return answer;
    }
}
























#########################################################################################
예제45)연습문제

1)문자열 다루기 기본
문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 "a234"이면 False를 리턴하고 "1234"라면 True를 리턴하면 됩니다.

제한 사항
s는 길이 1 이상, 길이 8 이하인 문자열입니다.
입출력 예
s	return
"a234"	false
"1234"	true



https://programmers.co.kr/learn/courses/30/lessons/12918
#########################################################################################



처음 내가 푼 답:
-이답은 Integer햇을때 처음에 부호 - 혹은 +가 와도 바꿔줘서 true가 되기때매 안되는건 알지만 혹시 테스트케이스엔 없을수 있으니 돌려봤는데 없었던 코드
	-하지만 궁극적으론 틀린 코드인 셈이다.


class Solution {
    public boolean solution(String s) {
        boolean answer = false;
        
        int len = s.length();
        
        if(len == 4 || len == 6) {        	
        	try {
        		Integer.valueOf(s);
        		answer = true;
        	}catch(Exception e) {}
        }
        
        return answer;
    }
}


다른 답:


class Solution {
  public boolean solution(String s) {
	  int len = s.length();
	  
	  if(len != 4 && len != 6) {
		  return false;
	  }
	  
	  for(int i=0;i<len;i++) {
		  if(s.charAt(i)<'0' || s.charAt(i)>'9') {
			  return false;
		  }
	  }
	  
	  return true;
  }
}



















#########################################################################################
예제46)연습문제

1)문자열 내림차순으로 배치하기
문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.
s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.

제한 사항
str은 길이 1 이상인 문자열입니다.
입출력 예
s	return
"Zbcdefg"	"gfedcbZ"

class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12917


*****효율 참고
1,2,3답중에 3번이 가장 빠름
1번에서 Comparator인터페이스의 메서드를 이용하는것보다 Collections의 메서드를 이용하는게 아주 조금 더 빠름
3>2>1
직접만든 2가 만들어진 클래스의 메서드 가져오는거보다 더 빠름

3번은 범접불가
#########################################################################################



1)이미 만들어 져있는 클래스(Collections) 혹은 인터페이스(Comparator)의 reverseOrder()메소드 사용한 답:

import java.util.Arrays;
import java.util.*;

class Solution {
    public String solution(String s) {
        String answer = "";
       
        Character[] ch = new Character[s.length()];
        for(int i=0;i<s.length();i++) {
        	ch[i] = s.charAt(i);
        }
        
        Arrays.sort(ch, Collections.reverseOrder());
        
        for(int i=0;i<ch.length;i++) {
        	answer += ch[i];
        }
       
        return answer;
    }
}




2)직접 Comparator interface를 구현한 클래스를 직접 만들어서 내림차순 적용한 답 :
	-이건 내림차순만 할때는 딱히 필요없지만 내림차순이 아닌 다른 특정한 규칙이 들어간 비교가 필요할때 사용된다.

import java.util.Arrays;
import java.util.*;

class Solution {
	
	public Comparator<Character> comp = new Comparator<Character>() {
		public int compare(Character o1, Character o2) {
			return o2.compareTo(o1);
		}; 
	};
	
    public String solution(String s) {
        String answer = "";
        
        int len = s.length();
        Character[] tmp = new Character[len];
        
        for(int i=0;i<len;i++) {
        	tmp[i] = s.charAt(i);
        }
        
        Arrays.sort(tmp, comp);
        
        for(int i=0;i<len;i++) {
        	answer += tmp[i];
        }
       
        return answer;
    }
}






3)StringBuilder 객체를 만들고 해당 객체의 reverse()메소드를 이용한 답:
import java.util.Arrays;
import java.util.*;

class Solution {
	

    public String solution(String s) {
        String answer = "";
        
        int len = s.length();
       
        char[] tmp = s.toCharArray();
        Arrays.sort(tmp);
        
        
        answer = new StringBuilder(new String(tmp)).reverse().toString();
      
        return answer;
    }
} 























#########################################################################################
예제47)연습문제

1)문자열 내 p와 y의 개수
대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 'p'의 개수와 'y'의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. 'p', 'y' 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.

예를 들어 s가 "pPoooyY"면 true를 return하고 "Pyy"라면 false를 return합니다.

제한사항
문자열 s의 길이 : 50 이하의 자연수
문자열 s는 알파벳으로만 이루어져 있습니다.
입출력 예
s	answer
"pPoooyY"	true
"Pyy"	false
입출력 예 설명
입출력 예 #1
'p'의 개수 2개, 'y'의 개수 2개로 같으므로 true를 return 합니다.

입출력 예 #2
'p'의 개수 1개, 'y'의 개수 2개로 다르므로 false를 return 합니다.

※ 공지 - 2021년 8월 23일 테스트케이스가 추가되었습니다.
class Solution {
    boolean solution(String s) {
        boolean answer = true;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12916
#########################################################################################

다른사람답:

class Solution {
    boolean solution(String s) {
        s = s.toLowerCase();
        int count = 0;
        
        for(int i=0;i<s.length();i++) {
        	if(s.charAt(i) == 'p') count++;
        	else if(s.charAt(i) == 'y') count--;
        }

        return count==0;
    }
}





다른사람 답 변형(s를 char[]에 넣으면 더 빠르지 않을까 싶어서 했는데 어떤건 빠르고 어떤건 느리고 그러네)한 답:

class Solution {
    boolean solution(String s) {
        boolean answer = true;
        s = s.toLowerCase();
        
        char[] tmp = s.toCharArray();
        int count = 0;
        
        for(int i=0;i<tmp.length;i++) {
        	if(tmp[i] == 'p') count++;
        	else if(tmp[i] == 'y') count--;
        }
        
        if(count != 0) answer = false;
        
        return answer;
    }
}



처음 내답:

class Solution {
    boolean solution(String s) {
        boolean answer = true;
        s = s.toLowerCase();
        
        char[] tmp = s.toCharArray();
        int Pcount = 0;
        int Ycount = 0;
        for(int i=0;i<tmp.length;i++) {
        	if(tmp[i] == 'p') Pcount++;
        	else if(tmp[i] == 'y') Ycount++;
        }
        
        if(Pcount != Ycount) answer = false;
        
        return answer;
    }
}





















#########################################################################################
예제48)연습문제

1)문자열 내 마음대로 정렬하기
문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.

제한 조건
strings는 길이 1 이상, 50이하인 배열입니다.
strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
모든 strings의 원소의 길이는 n보다 큽니다.
인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
입출력 예
strings	n	return
["sun", "bed", "car"]	1	["car", "bed", "sun"]
["abce", "abcd", "cdx"]	2	["abcd", "abce", "cdx"]
입출력 예 설명
입출력 예 1
"sun", "bed", "car"의 1번째 인덱스 값은 각각 "u", "e", "a" 입니다. 이를 기준으로 strings를 정렬하면 ["car", "bed", "sun"] 입니다.

입출력 예 2
"abce"와 "abcd", "cdx"의 2번째 인덱스 값은 "c", "c", "x"입니다. 따라서 정렬 후에는 "cdx"가 가장 뒤에 위치합니다. "abce"와 "abcd"는 사전순으로 정렬하면 "abcd"가 우선하므로, 답은 ["abcd", "abce", "cdx"] 입니다.


class Solution {
    public String[] solution(String[] strings, int n) {
        String[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12915
#########################################################################################



답:


import java.util.*;

class Solution {
    public String[] solution(String[] strings, int n) {
        int len = strings.length;
        String[] answer = new String[len];
        if(len == 1) {
        	answer[0] = strings[0];
        	return answer;
        }
   
        ArrayList<String> list = new ArrayList<>();
        for(int i=0;i<len;i++) {
        	list.add(strings[i].charAt(n)+strings[i]);
        }
        
        Collections.sort(list);
        
        for(int i=0;i<len;i++) {
        	answer[i] = list.get(i).substring(1, list.get(i).length());
        }
        
        return answer;
    }
}


























#########################################################################################
예제49)연습문제

1)두 정수 사이의 합
두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.

제한 조건
a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
a와 b의 대소관계는 정해져있지 않습니다.
입출력 예
a	b	return
3	5	12
3	3	3
5	3	12

class Solution {
    public long solution(int a, int b) {
        long answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12912
#########################################################################################



답:





import java.util.*;

class Solution {
    public long solution(int a, int b) {
        long answer = 0;
        
        if(a==b) return a;
        
        if(a>b) {
        	int tmp = a;
        	a = b;
        	b = tmp;
        }
      
        for(int i=a;i<=b;i++) {
        	answer += i;
        }
        
        return answer;
    }
}






















#########################################################################################
예제50)연습문제

1)나누어 떨어지는 숫자 배열
array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.
divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.

제한사항
arr은 자연수를 담은 배열입니다.
정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.
divisor는 자연수입니다.
array는 길이 1 이상인 배열입니다.
입출력 예
arr	divisor	return
[5, 9, 7, 10]	5	[5, 10]
[2, 36, 1, 3]	1	[1, 2, 3, 36]
[3,2,6]	10	[-1]
입출력 예 설명
입출력 예#1
arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다.

입출력 예#2
arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다.

입출력 예#3
3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다



class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = {};
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12910
#########################################################################################



답:



import java.util.*;

class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = {};
        
        List<Integer> list = new ArrayList<>();
        
        for(int i=0;i<arr.length;i++) {
        	if(arr[i]%divisor==0) {
        		list.add(arr[i]);
        	}
        }
        
        if(list.size()==0) {
        	answer = new int[1];
        	answer[0] = -1;
        	return answer;
        }
        
        
        Collections.sort(list);
         
        answer = new int[list.size()];
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}
























#########################################################################################
예제51)연습문제

1)같은 숫자는 싫어

배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,

arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.

제한사항
배열 arr의 크기 : 1,000,000 이하의 자연수
배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수
입출력 예
arr	answer
[1,1,3,3,0,1,1]	[1,3,0,1]
[4,4,4,3,3]	[4,3]
입출력 예 설명
입출력 예 #1,2
문제의 예시와 같습니다.


import java.util.*;

public class Solution {
    public int[] solution(int []arr) {
        int[] answer = {};
        
        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12906
#########################################################################################



답:



import java.util.*;

public class Solution {
    public int[] solution(int[] arr) {
        int[] answer = {};
        
        if(arr.length==1) return arr;
 
        
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<arr.length;i++) {
        	list.add(arr[i]);
        	while(i<arr.length-1&&arr[i]==arr[i+1]) {
        		i++;
        	}
        }
        
        answer = new int[list.size()];
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}






























#########################################################################################
예제52)연습문제

1)가운데 글자 가져오기

단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요. 단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다.

재한사항
s는 길이가 1 이상, 100이하인 스트링입니다.
입출력 예
s	return
"abcde"	"c"
"qwer"	"we"



class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12903
#########################################################################################



답:


class Solution {
    public String solution(String s) {
        String answer = "";
        
        int len = s.length();
        
        if(len % 2==0) {
        	answer += s.charAt((len / 2 - 1)); 
        	answer += s.charAt((len / 2)); 
        } else {
        	answer += s.charAt(len / 2);
        }
        
        return answer;
    }
}



다른사람 답:

class Solution {
    public String solution(String s) {
        String answer = "";
        int len = s.length();
        
        return s.substring((len-1)/2, (len/2)+1);
    }
}























#########################################################################################
예제53)연습문제

1)2016년
2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT

입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 "TUE"를 반환하세요.

제한 조건
2016년은 윤년입니다.
2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)
입출력 예
a	b	result
5	24	"TUE"


class Solution {
    public String solution(int a, int b) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12901
#########################################################################################



답:




class Solution {
    public String solution(int a, int b) {
        String answer = "";
        
        String[] week = {"THU", "FRI", "SAT", "SUN", "MON",
        		"TUE", "WED"};
        
        int[] month = {0,31,29,31,30,31,30,31,31,30,31,30,31};
        
        int sum = 0;
        
        for(int i=1;i<a;i++) {
        	sum += month[i];
        }
        
        int day = (sum + b)%7;
        answer = week[day];
        
        return answer;
    }
}
























#########################################################################################
예제54)연습문제

1)N개의 최소공배수

두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 예를 들어 2와 7의 최소공배수는 14가 됩니다. 정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. n개의 숫자를 담은 배열 arr이 입력되었을 때 이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.

제한 사항
arr은 길이 1이상, 15이하인 배열입니다.
arr의 원소는 100 이하인 자연수입니다.
입출력 예
arr	result
[2,6,8,14]	168
[1,2,3]	6



class Solution {
    public int solution(int[] arr) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12953
#########################################################################################



답:

import java.util.Arrays;

class Solution {
    
    public int GCD(int a, int b){
        if(a%b==0){
            return b;
        }else{
            return GCD(b, a%b);
        }
    }
    
    public int LCM(int a, int b){
        return (a*b)/GCD(a,b);
    }
    
    public int solution(int[] arr) {
        int answer = 0;
        if(arr.length == 1) return arr[0];
        
        
        Arrays.sort(arr);
        answer = LCM(arr[0], arr[1]);
        
        for(int i=2;i<arr.length;i++) {
        	answer = LCM(answer, arr[i]);
        }
        
        return answer;
    }
}



























#########################################################################################
예제55)연습문제

1)JadenCase 문자열 만들기
JadenCase란 모든 단어의 첫 문자가 대문자이고, 그 외의 알파벳은 소문자인 문자열입니다. 문자열 s가 주어졌을 때, s를 JadenCase로 바꾼 문자열을 리턴하는 함수, solution을 완성해주세요.

제한 조건
s는 길이 1 이상인 문자열입니다.
s는 알파벳과 공백문자(" ")로 이루어져 있습니다.
첫 문자가 영문이 아닐때에는 이어지는 영문은 소문자로 씁니다. ( 첫번째 입출력 예 참고 )
입출력 예
s	return
"3people unFollowed me"	"3people Unfollowed Me"
"for the last week"	"For The Last Week"


class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12951
#########################################################################################



내답(split안하고 아스키값을 이용하여 대문자로변환):
	-내꺼가 훨씬 빠르긴한데 아마 문제의 의도는 split이였던듯
import java.util.Arrays;

class Solution {
    public String solution(String s) {
        String answer = "";
        
        s = s.toLowerCase();
        char[] tmp = s.toCharArray();
  
        
        int j = 0;
        for(int i=0;i<s.length();i++) {
        	if(s.charAt(i)==' ') {
        		j = 0;
        	} else if(s.charAt(i) < 'a' || s.charAt(i) > 'z') {
        		j++;
        	} else if(j==0) {
        		tmp[i] = (char)(s.charAt(i)-32);
        		j++;
        	}
        	
        }
        
        answer = new String(tmp);
        
        return answer;
    }
}



딴사람답(SPLIT사용하고 toUpperCase() 메소드를 이용하여 값구함):

import java.util.Arrays;

class Solution {
    public String solution(String s) {
        String answer = "";
        
        String[] sp = s.toLowerCase().split("");
   
        boolean check = true;
        
        for(int i=0;i<sp.length;i++) {
        	
        	if(sp[i].equals(" ")) {
        		check = true;
        		answer += " ";
        		continue;
        	}
        	
        	if(check) {
        		answer += sp[i].toUpperCase();
        		check = false;
        	}else {
        		answer += sp[i];
        	}
        }
        
        
        
        return answer;
    }
}












































































21.11.01_18회차
===============================================================================
*레벨2(~올바른괄호)
===============================================================================






































































#########################################################################################
예제56)연습문제

1)행렬의 곱셈
2차원 행렬 arr1과 arr2를 입력받아, arr1에 arr2를 곱한 결과를 반환하는 함수, solution을 완성해주세요.

제한 조건
행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.
행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.
곱할 수 있는 배열만 주어집니다.
입출력 예
arr1	arr2	return
[[1, 4], [3, 2], [4, 1]]	[[3, 3], [3, 3]]	[[15, 15], [15, 15], [15, 15]]
[[2, 3, 2], [4, 2, 4], [3, 1, 4]]	[[5, 4, 3], [2, 4, 1], [3, 1, 1]]	[[22, 22, 11], [36, 28, 18], [29, 20, 14]]


class Solution {
    public int[][] solution(int[][] arr1, int[][] arr2) {
        int[][] answer = {};
        return answer;
    }
}

	2 3 2       22 22 11
        4 2 4       36 28 18
        3 1 4       29 20 14
             
        5 4 3	10	8 9  
        2 4 1	12	8 1
        3 1 1	6	4 4


	1 4
 	3 2
	4 1

	3 3 
	3 3 




	        arr[0][0] * arr2[0][0];
                arr[0][1] * arr2[1][0];
	        arr[0][0] * arr2[0][1];
                arr[0][1] * arr2[1][1];
                
                arr[1][0] * arr2[0][1];
                arr[1][1] * arr2[1][1];
                
                arr[2][0] * arr2[0][2];
                arr[2][1] * arr2[1][2];

https://programmers.co.kr/learn/courses/30/lessons/12949
#########################################################################################



답:


import java.util.*;

class Solution {
    public int[][] solution(int[][] arr1, int[][] arr2) {
        int[][] answer = new int[arr1.length][arr2[0].length];
        
        
        for(int i=0;i<arr1.length;i++) {
        	for(int j=0;j<arr1[0].length;j++) {
        		for(int k=0;k<arr2[0].length;k++) {
        			answer[i][k] += arr1[i][j]*arr2[j][k];
        			
        			
        			
        		}
        	}
        }
        
        return answer;
    }
}























#########################################################################################
예제57)연습문제

1)피보나치 수
피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.

예를들어

F(2) = F(0) + F(1) = 0 + 1 = 1
F(3) = F(1) + F(2) = 1 + 1 = 2
F(4) = F(2) + F(3) = 1 + 2 = 3
F(5) = F(3) + F(4) = 2 + 3 = 5
와 같이 이어집니다.

2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.

제한 사항
n은 2 이상 100,000 이하인 자연수입니다.
입출력 예
n	return
3	2
5	5
입출력 예 설명
피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.

class Solution {
    public int solution(int n) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12945
#########################################################################################




답:


class Solution {
 
	
    public int solution(int n) {
        int answer = 0;
        
        int[] tmp = new int[n+1];
        
        
        tmp[0] = 0;
        tmp[1] = 1;
        
        for(int i=2;i<=n;i++) {
        	tmp[i] = (tmp[i-2]+tmp[i-1]) % 1234567;
        }
        
        answer = tmp[n];
        return answer;
    }
}























#########################################################################################
예제58)연습문제

1)최솟값 만들기
길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.
배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다. 이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)

예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면

A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)
A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)
A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)
즉, 이 경우가 최소가 되므로 29를 return 합니다.

배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.

제한사항
배열 A, B의 크기 : 1,000 이하의 자연수
배열 A, B의 원소의 크기 : 1,000 이하의 자연수
입출력 예
A	B	answer
[1, 4, 2]	[5, 4, 4]	29
[1,2]	[3,4]	10
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
A에서 첫번째 숫자인 1, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 4) 다음, A에서 두번째 숫자인 2, B에서 첫번째 숫자인 3을 뽑아 곱하여 더합니다. (누적된 값 : 4 + 6 = 10)
이 경우가 최소이므로 10을 return 합니다.




class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12941
#########################################################################################




답:



import java.util.Arrays;

class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;

        Arrays.sort(A);
        Arrays.sort(B);
        
        
        for(int i=0;i<A.length;i++) {
        	answer += A[i] * B[A.length-1-i];
         }

        
        return answer;
    }
}
























#########################################################################################
예제59)연습문제

1)최댓값과 최솟값

문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다. str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 "(최소값) (최대값)"형태의 문자열을 반환하는 함수, solution을 완성하세요.
예를들어 s가 "1 2 3 4"라면 "1 4"를 리턴하고, "-1 -2 -3 -4"라면 "-4 -1"을 리턴하면 됩니다.

제한 조건
s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.
입출력 예
s	return
"1 2 3 4"	"1 4"
"-1 -2 -3 -4"	"-4 -1"
"-1 -1"	"-1 -1"


class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12939
#########################################################################################




답:


import java.util.Arrays;
import java.util.Collections;

class Solution {
    public String solution(String s) {
        String answer = "";
         
       String[] tmp = s.split(" ");
       int[] num = new int[tmp.length];
       
       for(int i=0;i<tmp.length;i++) {
    	   num[i] = Integer.parseInt(tmp[i]);
       }
       
       Arrays.sort(num);
       
       answer = num[0] + " " + num[tmp.length-1];
        
        
        
        return answer;
    }
}


























#########################################################################################
예제60)연습문제

1)숫자의 표현
Finn은 요즘 수학공부에 빠져 있습니다. 수학 공부를 하던 Finn은 자연수 n을 연속한 자연수들로 표현 하는 방법이 여러개라는 사실을 알게 되었습니다. 예를들어 15는 다음과 같이 4가지로 표현 할 수 있습니다.

1 + 2 + 3 + 4 + 5 = 15
4 + 5 + 6 = 15
7 + 8 = 15
15 = 15
자연수 n이 매개변수로 주어질 때, 연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성해주세요.

제한사항
n은 10,000 이하의 자연수 입니다.
입출력 예
n	result
15	4
입출력 예 설명
입출력 예#1
문제의 예시와 같습니다.

class Solution {
    public int solution(int n) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12924
#########################################################################################




답:


class Solution {
    public int solution(int n) {
        int answer = 0;
        int sum = 0;
        
        for(int i=1;i<=n/2;i++) {
        	for(int j=i;j<=n/2+1;j++) {
        		sum+= j;
        		
        		if(sum==n) {
        			answer++;
        			break;
        		} else if(sum>n) {
        			break;
        		}
        	}
        	sum=0;
        }
        
        answer++;
        
        return answer;
    }
}



















#########################################################################################
예제61)연습문제

1)땅따먹기
땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.

예를 들면,

| 1 | 2 | 3 | 5 |

| 5 | 6 | 7 | 8 |

| 4 | 3 | 2 | 1 |

로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.

마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요. 위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.

제한사항
행의 개수 N : 100,000 이하의 자연수
열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.
점수 : 100 이하의 자연수
입출력 예
land	answer
[[1,2,3,5],[5,6,7,8],[4,3,2,1]]	16
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.


class Solution {
    int solution(int[][] land) {
        int answer = 0;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12913
#########################################################################################




답:






import java.util.*;

class Solution {
    int solution(int[][] land) {
        int answer = 0;
        
        int len = land.length;
     
        for(int i=1;i<len;i++) {
        	land[i][0] += Math.max(land[i-1][1], Math.max(land[i-1][2], land[i-1][3]));
        	land[i][1] += Math.max(land[i-1][0], Math.max(land[i-1][2], land[i-1][3]));
        	land[i][2] += Math.max(land[i-1][1], Math.max(land[i-1][0], land[i-1][3]));
        	land[i][3] += Math.max(land[i-1][1], Math.max(land[i-1][2], land[i-1][0]));
        }
        
        
        Arrays.sort(land[len-1]);

        answer = land[len-1][3];
        
        return answer;
    }
}
























#########################################################################################
예제62)연습문제

1)다음 큰 숫자

자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.

조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.
조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.
조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.
예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.

자연수 n이 매개변수로 주어질 때, n의 다음 큰 숫자를 return 하는 solution 함수를 완성해주세요.

제한 사항
n은 1,000,000 이하의 자연수 입니다.
입출력 예
n	result
78	83
15	23
입출력 예 설명
입출력 예#1
문제 예시와 같습니다.
입출력 예#2
15(1111)의 다음 큰 숫자는 23(10111)입니다.



class Solution {
    public int solution(int n) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12911
#########################################################################################




답:






class Solution {
    public int solution(int n) {
        int answer = 0;
        
        String str = Integer.toBinaryString(n);
        int count = 0;
        for(int i=0;i<str.length();i++) {
        	if(str.charAt(i)=='1') {
        		count++;
        	}
        }
        
       int nextCount = 0;
       
       while(true){
    	   n++;
    	   String nextStr = Integer.toBinaryString(n);
    	   for(int i=0;i<nextStr.length();i++) {
    		   if(nextStr.charAt(i)=='1') {
    			   nextCount++;
    		   }
    	   }
    	   
    	   if(nextCount==count) {
    		   answer = n;
    		   break;
    	   }
    	   nextCount=0;
       }
        
        
        return answer;
    }
}




























#########################################################################################
예제63)연습문제

1)올바른 괄호
괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다. 예를 들어

"()()" 또는 "(())()" 는 올바른 괄호입니다.
")()(" 또는 "(()(" 는 올바르지 않은 괄호입니다.
'(' 또는 ')' 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.

제한사항
문자열 s의 길이 : 100,000 이하의 자연수
문자열 s는 '(' 또는 ')' 로만 이루어져 있습니다.
입출력 예
s	answer
"()()"	true
"(())()"	true
")()("	false
"(()("	false
입출력 예 설명
입출력 예 #1,2,3,4
문제의 예시와 같습니다.



class Solution {
    boolean solution(String s) {
        boolean answer = true;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12909
#########################################################################################




답:




class Solution {
    boolean solution(String s) {
        boolean answer = true;
        int count = 0;
        for(int i=0;i<s.length();i++) {
        	if(s.charAt(i) == '(') {
        		count++;
        	}else {
        		if(count>0) {
        			count--;
        		}else {
        			answer = false;
        			break;
        		}
        	}
        }
        
       if(count!=0) answer = false; 

        return answer;
    }
}







































































21.11.02_19회차
===============================================================================
*다양한유형문제(~예산_summer/winter(2018))
===============================================================================





























































#########################################################################################
예제64)연습문제

1)124 나라의 숫자

124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다.

124 나라에는 자연수만 존재합니다.
124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다.
예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다.

10진법	124 나라	10진법	124 나라
1	1	6	14
2	2	7	21
3	4	8	22
4	11	9	24
5	12	10	41
자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요.

제한사항
n은 500,000,000이하의 자연수 입니다.
입출력 예
n	result
1	1
2	2
3	4
4	11

https://programmers.co.kr/learn/courses/30/lessons/12899
#########################################################################################




답:


class Solution {
    public String solution(int n) {
        StringBuilder answer = new StringBuilder();
        int tmp = 0;
        while(n>0) {
        	tmp = n%3;
        	n /= 3;
        	
        	if(tmp==0) {
        		n--;
        		tmp = 4;
        	}
        	answer.insert(0, tmp);
        }
        
        return answer.toString();
    }
}




















#########################################################################################
예제65)위클리 챌린지

1)부족한 금액 계산하기

새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 이 놀이기구의 원래 이용료는 price원 인데, 놀이기구를 N 번 째 이용한다면 원래 이용료의 N배를 받기로 하였습니다. 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.
놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 return 하도록 solution 함수를 완성하세요.
단, 금액이 부족하지 않으면 0을 return 하세요.

제한사항
놀이기구의 이용료 price : 1 ≤ price ≤ 2,500, price는 자연수
처음 가지고 있던 금액 money : 1 ≤ money ≤ 1,000,000,000, money는 자연수
놀이기구의 이용 횟수 count : 1 ≤ count ≤ 2,500, count는 자연수
입출력 예
price	money	count	result
3	20	4	10
입출력 예 설명
입출력 예 #1
이용금액이 3인 놀이기구를 4번 타고 싶은 고객이 현재 가진 금액이 20이라면, 총 필요한 놀이기구의 이용 금액은 30 (= 3+6+9+12) 이 되어 10만큼 부족하므로 10을 return 합니다.

참고 사항
미션 언어는 Java, JavaScript, Python3, C++ 만 해당 됩니다.
같은 코드를 제출한 사람이 여럿이라면 코드를 가장 먼저 제출한 분께 상품을 드립니다.
좋아요 수가 동일할 경우 코드를 가장 먼저 제출한 분께 상품을 드립니다.



https://programmers.co.kr/learn/courses/30/lessons/82612
#########################################################################################




답:




class Solution {
    public long solution(int price, int money, int count) {
        long answer = 0;

        long sum = 0;
        for(int i=1;i<=count;i++){
            sum += price * i;
        }
        
        if(sum > money){
            return sum-money;
        }
        
        return answer;
    }
}

























#########################################################################################
예제66)위클리 챌린지

1)최소 직사각형

명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다. 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.

아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.

명함 번호	가로 길이	세로 길이
1	60	50
2	30	70
3	60	30
4	80	40
가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 이때의 지갑 크기는 4000(=80 x 50)입니다.

모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.

제한사항
sizes의 길이는 1 이상 10,000 이하입니다.
sizes의 원소는 [w, h] 형식입니다.
w는 명함의 가로 길이를 나타냅니다.
h는 명함의 세로 길이를 나타냅니다.
w와 h는 1 이상 1,000 이하인 자연수입니다.
입출력 예
sizes	result
[[60, 50], [30, 70], [60, 30], [80, 40]]	4000
[[10, 7], [12, 3], [8, 15], [14, 7], [5, 15]]	120
[[14, 4], [19, 6], [6, 16], [18, 7], [7, 11]]	133
입출력 예 설명
입출력 예 #1
문제 예시와 같습니다.

입출력 예 #2
명함들을 적절히 회전시켜 겹쳤을 때, 3번째 명함(가로: 8, 세로: 15)이 다른 모든 명함보다 크기가 큽니다. 따라서 지갑의 크기는 3번째 명함의 크기와 같으며, 120(=8 x 15)을 return 합니다.

입출력 예 #3
명함들을 적절히 회전시켜 겹쳤을 때, 모든 명함을 포함하는 가장 작은 지갑의 크기는 133(=19 x 7)입니다.


https://programmers.co.kr/learn/courses/30/lessons/86491
#########################################################################################




답:





import java.util.Arrays;

class Solution {
    public int solution(int[][] sizes) {
        int answer = 0;
        int len = sizes.length;
        for(int i=0;i<len;i++){
            Arrays.sort(sizes[i]);
        }
        
        int[] tmp1 = new int[sizes.length];
        int[] tmp2 = new int[sizes.length];
        
        
        for(int i=0;i<len;i++){
            tmp1[i] = sizes[i][0];
            tmp2[i] = sizes[i][1];
        }
        
        Arrays.sort(tmp1);
        Arrays.sort(tmp2);
        
        answer = tmp1[len-1] * tmp2[len-1];
        
        return answer;
    }
}































#########################################################################################
예제67)위클리 챌린지

1)모음 사전
사전에 알파벳 모음 'A', 'E', 'I', 'O', 'U'만을 사용하여 만들 수 있는, 길이 5 이하의 모든 단어가 수록되어 있습니다. 사전에서 첫 번째 단어는 "A"이고, 그다음은 "AA"이며, 마지막 단어는 "UUUUU"입니다.

단어 하나 word가 매개변수로 주어질 때, 이 단어가 사전에서 몇 번째 단어인지 return 하도록 solution 함수를 완성해주세요.

제한사항
word의 길이는 1 이상 5 이하입니다.
word는 알파벳 대문자 'A', 'E', 'I', 'O', 'U'로만 이루어져 있습니다.
입출력 예
word	result
"AAAAE"	6
"AAAE"	10
"I"	1563
"EIO"	1189
입출력 예 설명
입출력 예 #1

사전에서 첫 번째 단어는 "A"이고, 그다음은 "AA", "AAA", "AAAA", "AAAAA", "AAAAE", ... 와 같습니다. "AAAAE"는 사전에서 6번째 단어입니다.

입출력 예 #2

"AAAE"는 "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAE", "AAAAI", "AAAAO", "AAAAU"의 다음인 10번째 단어입니다.

입출력 예 #3

"I"는 1563번째 단어입니다.

입출력 예 #4

"EIO"는 1189번째 단어입니다.


class Solution {
    public int solution(String word) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/84512
#########################################################################################




답:




class Solution {
	
	char[] aeiou = {'A', 'E', 'I', 'O', 'U'};
	int count = 0;
	boolean isStop = false;
	
	
	public void dfs(int depth, String next, String target) {
		if(depth==6) return;
		
		if(next.equals(target)) {
			isStop = true;
			return;
		}
		
		for(int i=0;i<5;i++) {
			if(isStop) return;
			
			if(depth+1<6) {
				count++;
			}
			
			dfs(depth+1, next+aeiou[i], target);
		}
		
		
	}
	
    public int solution(String word) {
        int answer = 0;
        
        dfs(0, "", word);
        
        return count;
    }
}





















#########################################################################################
예제68)2017 팁스타운

1)예상 대진표
△△ 게임대회가 개최되었습니다. 이 대회는 N명이 참가하고, 토너먼트 형식으로 진행됩니다. N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다. 그리고, 1번↔2번, 3번↔4번, ... , N-1번↔N번의 참가자끼리 게임을 진행합니다. 각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다. 이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다. 만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고, 3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 게임은 최종 한 명이 남을 때까지 진행됩니다.

이때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다. 게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요. 단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.

제한사항
N : 21 이상 220 이하인 자연수 (2의 지수 승으로 주어지므로 부전승은 발생하지 않습니다.)
A, B : N 이하인 자연수 (단, A ≠ B 입니다.)
입출력 예
N	A	B	answer
8	4	7	3
입출력 예 설명
입출력 예 #1
첫 번째 라운드에서 4번 참가자는 3번 참가자와 붙게 되고, 7번 참가자는 8번 참가자와 붙게 됩니다. 항상 이긴다고 가정했으므로 4번 참가자는 다음 라운드에서 2번이 되고, 7번 참가자는 4번이 됩니다. 두 번째 라운드에서 2번은 1번과 붙게 되고, 4번은 3번과 붙게 됩니다. 항상 이긴다고 가정했으므로 2번은 다음 라운드에서 1번이 되고, 4번은 2번이 됩니다. 세 번째 라운드에서 1번과 2번으로 두 참가자가 붙게 되므로 3을 return 하면 됩니다.

class Solution
{
    public int solution(int n, int a, int b)
    {
        int answer = 0;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12985
#########################################################################################




답:





class Solution
{
	
	public int round(int a, int b) {
		int cnt = 0;
		
		while(true) {
			if(b%2==0&&a+1==b) break;
			if(a%2!=0) a++;
			if(b%2!=0) b++;
			
			a/=2;
			b/=2;
			cnt++;
		}
		
		
		return ++cnt;
	}
	
    public int solution(int n, int a, int b)
    {
        int answer = 0;
        
        return round(Math.min(a, b), Math.max(a, b));
    }
}






























#########################################################################################
예제69)2017 팁스타운

1)짝지어 제거하기
짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.

예를 들어, 문자열 S = baabaa 라면

b aa baa → bb aa → aa →

의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.

제한사항
문자열의 길이 : 1,000,000이하의 자연수
문자열은 모두 소문자로 이루어져 있습니다.
입출력 예
s	result
baabaa	1
cdcd	0
입출력 예 설명
입출력 예 #1
위의 예시와 같습니다.
입출력 예 #2
문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.

※ 공지 - 2020년 6월 8일 테스트케이스가 추가되었습니다.




class Solution
{
    public int solution(String s)
    {
        int answer = -1;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}






https://programmers.co.kr/learn/courses/30/lessons/12973
#########################################################################################




답:



import java.util.*;

class Solution
{
    public int solution(String s)
    {
    	int answer = 0;
    	
    	
    	Stack<Character> stack = new Stack<>();
      
    	for(int i=0;i<s.length();i++) {
    		if(stack.isEmpty()) {
    			stack.add(s.charAt(i));
    			continue;
    		}
    		
    		if(stack.peek() == s.charAt(i)) {
    			stack.pop();
    			continue;
    		}
    		stack.add(s.charAt(i));
    	}
    	
    	if(stack.size()==0) answer = 1;
    	
        return answer;
    }
}



























#########################################################################################
예제70)찾아라 프로그래밍 마에스터

1)폰켓몬

당신은 폰켓몬을 잡기 위한 오랜 여행 끝에, 홍 박사님의 연구실에 도착했습니다. 홍 박사님은 당신에게 자신의 연구실에 있는 총 N 마리의 폰켓몬 중에서 N/2마리를 가져가도 좋다고 했습니다.
홍 박사님 연구실의 폰켓몬은 종류에 따라 번호를 붙여 구분합니다. 따라서 같은 종류의 폰켓몬은 같은 번호를 가지고 있습니다. 예를 들어 연구실에 총 4마리의 폰켓몬이 있고, 각 폰켓몬의 종류 번호가 [3번, 1번, 2번, 3번]이라면 이는 3번 폰켓몬 두 마리, 1번 폰켓몬 한 마리, 2번 폰켓몬 한 마리가 있음을 나타냅니다. 이때, 4마리의 폰켓몬 중 2마리를 고르는 방법은 다음과 같이 6가지가 있습니다.

첫 번째(3번), 두 번째(1번) 폰켓몬을 선택
첫 번째(3번), 세 번째(2번) 폰켓몬을 선택
첫 번째(3번), 네 번째(3번) 폰켓몬을 선택
두 번째(1번), 세 번째(2번) 폰켓몬을 선택
두 번째(1번), 네 번째(3번) 폰켓몬을 선택
세 번째(2번), 네 번째(3번) 폰켓몬을 선택
이때, 첫 번째(3번) 폰켓몬과 네 번째(3번) 폰켓몬을 선택하는 방법은 한 종류(3번 폰켓몬 두 마리)의 폰켓몬만 가질 수 있지만, 다른 방법들은 모두 두 종류의 폰켓몬을 가질 수 있습니다. 따라서 위 예시에서 가질 수 있는 폰켓몬 종류 수의 최댓값은 2가 됩니다.
당신은 최대한 다양한 종류의 폰켓몬을 가지길 원하기 때문에, 최대한 많은 종류의 폰켓몬을 포함해서 N/2마리를 선택하려 합니다. N마리 폰켓몬의 종류 번호가 담긴 배열 nums가 매개변수로 주어질 때, N/2마리의 폰켓몬을 선택하는 방법 중, 가장 많은 종류의 폰켓몬을 선택하는 방법을 찾아, 그때의 폰켓몬 종류 번호의 개수를 return 하도록 solution 함수를 완성해주세요.

제한사항
nums는 폰켓몬의 종류 번호가 담긴 1차원 배열입니다.
nums의 길이(N)는 1 이상 10,000 이하의 자연수이며, 항상 짝수로 주어집니다.
폰켓몬의 종류 번호는 1 이상 200,000 이하의 자연수로 나타냅니다.
가장 많은 종류의 폰켓몬을 선택하는 방법이 여러 가지인 경우에도, 선택할 수 있는 폰켓몬 종류 개수의 최댓값 하나만 return 하면 됩니다.
입출력 예
nums	result
[3,1,2,3]	2
[3,3,3,2,2,4]	3
[3,3,3,2,2,2]	2
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
6마리의 폰켓몬이 있으므로, 3마리의 폰켓몬을 골라야 합니다.
가장 많은 종류의 폰켓몬을 고르기 위해서는 3번 폰켓몬 한 마리, 2번 폰켓몬 한 마리, 4번 폰켓몬 한 마리를 고르면 되며, 따라서 3을 return 합니다.

입출력 예 #3
6마리의 폰켓몬이 있으므로, 3마리의 폰켓몬을 골라야 합니다.
가장 많은 종류의 폰켓몬을 고르기 위해서는 3번 폰켓몬 한 마리와 2번 폰켓몬 두 마리를 고르거나, 혹은 3번 폰켓몬 두 마리와 2번 폰켓몬 한 마리를 고르면 됩니다. 따라서 최대 고를 수 있는 폰켓몬 종류의 수는 2입니다.


class Solution {
    public int solution(int[] nums) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/1845
#########################################################################################




답:








import java.util.*;

class Solution {
    public int solution(int[] nums) {
        int answer = 0;
        
        int j =0;
        Map<Integer, Boolean> hm = new HashMap<>();
        for(int i=0;i<nums.length;i++) {
        	hm.put(nums[i], true);
        }
        
        int num = nums.length/2;
        if(hm.size()>=num) {
        	return num;
        }
        
        
        return hm.size();
    }
}





















#########################################################################################
예제71)Summer/Winter coding(~2018)
1)소수 만들기

주어진 숫자 중 3개의 수를 더했을 때 소수가 되는 경우의 개수를 구하려고 합니다. 숫자들이 들어있는 배열 nums가 매개변수로 주어질 때, nums에 있는 숫자들 중 서로 다른 3개를 골라 더했을 때 소수가 되는 경우의 개수를 return 하도록 solution 함수를 완성해주세요.

제한사항
nums에 들어있는 숫자의 개수는 3개 이상 50개 이하입니다.
nums의 각 원소는 1 이상 1,000 이하의 자연수이며, 중복된 숫자가 들어있지 않습니다.
입출력 예
nums	result
[1,2,3,4]	1
[1,2,7,6,4]	4
입출력 예 설명
입출력 예 #1
[1,2,4]를 이용해서 7을 만들 수 있습니다.

입출력 예 #2
[1,2,4]를 이용해서 7을 만들 수 있습니다.
[1,4,6]을 이용해서 11을 만들 수 있습니다.
[2,4,7]을 이용해서 13을 만들 수 있습니다.
[4,6,7]을 이용해서 17을 만들 수 있습니다.

https://programmers.co.kr/learn/courses/30/lessons/12977
#########################################################################################




답:




class Solution {
    public int solution(int[] nums) {
        int answer = 0;

        int len = nums.length;
        
        for(int i=0;i<len-2;i++) {
        	for(int j=i+1;j<len-1;j++) {
        		for(int k=j+1;k<len;k++) {
        			int tmp = nums[i]+nums[j]+nums[k];
        			boolean check = true;
        			
        			for(int x=2;x<tmp;x++) {
        				if(tmp%x==0) {
        					check = false;
        					break;
        				}
        			}
        			
        			
        			if(check) answer++;	
        			
        		}
        	}
        }
        
       
        
        
        return answer;
    }
}


























#########################################################################################
예제72)Summer/Winter coding(~2018)
1)예산

S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

제한사항
d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.
d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.
budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.
입출력 예
d	budget	result
[1,3,2,5,4]	9	3
[2,2,3,3]	10	4
입출력 예 설명
입출력 예 #1
각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다. 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다. 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다.

1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다.
1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다.
1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다.
3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다.

입출력 예 #2
모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다.

class Solution {
    public int solution(int[] d, int budget) {
        int answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12982
#########################################################################################




답:


import java.util.Arrays;

class Solution {
    public int solution(int[] d, int budget) {
        int answer = 0;
        int sum = 0;
        Arrays.sort(d);
        
        
        for(int i=0;i<d.length;i++) {
        	if(sum + d[i] > budget) {
        		break;
        	}
        	sum += d[i];
        	answer++;
        }
        
        return answer;
    }
}

