21.10.15_1회차
===============================================================================
*자료형변환응용, 로또
===============================================================================








################################################################################################################
예제1)자료형변환, 배열응용

1)함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 
	예를들어 n이 118372면 873211을 리턴하면 됩니다.



import java.util.Arrays;

class Solution {
    public long solution(long n) {
        long answer = 0;

        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12933

################################################################################################################

답:


import java.util.Arrays;

class Solution {
    public long solution(long n) {
        
        
        long answer = 0;
        String num = String.valueOf(n);
		char[] arr = new char[num.length()];
		
		for(int i=0;i<num.length();i++) {
			arr[i] = num.charAt(i);
		}
		
		Arrays.sort(arr);
		
		String tmp = "";
		for(int i=num.length()-1;i>=0;i--) {
			tmp += arr[i];
		}
		
		answer = Long.valueOf(tmp);
	
        
        return answer;
    }
}





import java.util.Arrays;
class Solution {
    public long solution(long n) {
        long answer = 0;
        String i = String.valueOf(n);
        char[] sol = i.toCharArray();
        Arrays.sort(sol);
        i =  new StringBuilder(new String(sol)).reverse().toString();
        answer = Long.parseLong(i);
        
        return answer;
    }
}
 














################################################################################################################
예제2)로또의 최고순위와 최저순위

1)문제 설명
로또 6/45(이하 '로또'로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다. 1

순위	당첨 내용
1	6개 번호가 모두 일치
2	5개 번호가 일치
3	4개 번호가 일치
4	3개 번호가 일치
5	2개 번호가 일치
6(낙첨)	그 외
로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다. 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다. 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.
알아볼 수 없는 번호를 0으로 표기하기로 하고, 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.

당첨 번호	31	10	45	1	6	19	결과
최고 순위 번호	31	0→10	44	1	0→6	25	4개 번호 일치, 3등
최저 순위 번호	31	0→11	44	1	0→7	25	2개 번호 일치, 5등
순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.
알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.
알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.
민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다. 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

제한사항
lottos는 길이 6인 정수 배열입니다.
lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
0은 알아볼 수 없는 숫자를 의미합니다.
0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.
lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.
win_nums은 길이 6인 정수 배열입니다.
win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.
win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.
입출력 예
lottos	win_nums	result
[44, 1, 0, 0, 31, 25]	[31, 10, 45, 1, 6, 19]	[3, 5]
[0, 0, 0, 0, 0, 0]	[38, 19, 20, 40, 15, 25]	[1, 6]
[45, 4, 35, 20, 3, 9]	[20, 9, 3, 45, 4, 35]	[1, 1]
입출력 예 설명
입출력 예 #1
문제 예시와 같습니다.

입출력 예 #2
알아볼 수 없는 번호들이 아래와 같았다면, 1등과 6등에 당첨될 수 있습니다.

당첨 번호	38	19	20	40	15	25	결과
최고 순위 번호	0→38	0→19	0→20	0→40	0→15	0→25	6개 번호 일치, 1등
최저 순위 번호	0→21	0→22	0→23	0→24	0→26	0→27	0개 번호 일치, 6등
입출력 예 #3
민우가 구매한 로또의 번호와 당첨 번호가 모두 일치하므로, 최고 순위와 최저 순위는 모두 1등입니다.

실제로 사용되는 로또 순위의 결정 방식과는 약간 다르지만, 이 문제에서는 지문에 명시된 대로 로또 순위를 결정하도록 합니다.  ↩



class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/77484
################################################################################################################




흐억, shadowcat02님 답 :

import java.util.HashMap;
import java.util.Map;

class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        Map<Integer, Boolean> map = new HashMap<Integer, Boolean>();
		//이부분은 boolean안하고 integer해서 0만 넣어도 될듯 굳이 true쓸일없다
        int zeroCount = 0;

        for(int lotto : lottos) {
            if(lotto == 0) {
                zeroCount++;
                continue;
            }
            map.put(lotto, true);
        }


        int sameCount = 0;
        for(int winNum : win_nums) {
            if(map.containsKey(winNum)) sameCount++;
        }

        int maxRank = 7 - (sameCount + zeroCount);
        int minRank = 7 - sameCount;
        if(maxRank > 6) maxRank = 6;
        if(minRank > 6) minRank = 6;

        return new int[] {maxRank, minRank};
    }
}












내 답1(복습시 생각해낸 howCount최소연산):


import java.util.*;

class Solution {
    public int[] solution(int[] lottos, int[] win_nums) {
        int[] answer = {};
        
        int factCount = 0;
        int howCount = 0;
        
        Arrays.sort(lottos);
        
        while(howCount<6&&lottos[howCount]==0) {
        	howCount++;
        }
        if(howCount==6) return new int[]{1,6};
        
        Map<Integer, Boolean> hm = new HashMap<>();
        
        for(int i=0;i<6;i++) {
        	hm.put(lottos[i], false);
        }
        
        for(int i=0;i<6;i++) {
        	if(hm.containsKey(win_nums[i])) {
        		factCount++;
        	};
        }
        
        
        int maxLank = 7-(factCount+howCount);
        int minLank = 7-factCount;
        
        if(maxLank == 7) maxLank = 6; 
        if(minLank == 7) minLank = 6; 
        		
        answer = new int[2];
        answer[0] = maxLank;
        answer[1] = minLank;
        
        return answer;
    }
}







내 답2(제일처음 헛수고한답):

import java.util.Arrays;

public class Solution {
	public static final int TOTAL = 6;
	public static final int MAX_EQUAL = 0;
	public static final int MIN_EQUAL = 1;
	public static final int MAX_RANK = 0;
	public static final int MIN_RANK = 1;
	
	
	public void sort(int[] lottos, int[] win_nums) {
		Arrays.sort(lottos);
		Arrays.sort(win_nums);
	}
	
	public int checkZeroCount(int[] lottos) {
		int count = 0;
		
		for(int i=0;i<TOTAL;i++) {
			if(lottos[i] == 0) {
				count++;
			}
		}
	
		return count;
	}
	
	public int checkNumber(int[] lottos, int[] win_nums, int zeroCount) {
		if(zeroCount == 6) return 0;
		
		int i = zeroCount;
		int j = 0;
		
		int equalCount = 0;
		
		while(i<6) {
			while(j!=6 && lottos[i] != win_nums[j]) {
				j++;
			}
			if(j!=6) equalCount++;
			j=0;
			i++;
		}
		
		return equalCount;
	}
	
	public int[] maxMinEqual(int equalCount, int zeroCount) {
		
		int[] result = new int[2];
		
		switch(equalCount){
		case 6: 
			result[MAX_EQUAL] = 6;
			result[MIN_EQUAL] = 6; 
			break;
		case 5: 
			result[MAX_EQUAL] = 5+zeroCount;
			result[MIN_EQUAL] = 5; 
			break;
		case 4: 
			result[MAX_EQUAL] = 4+zeroCount;
			result[MIN_EQUAL] = 4; 
			break;
		case 3: 
			result[MAX_EQUAL] = 3+zeroCount;
			result[MIN_EQUAL] = 3; 
			break;
		case 2: 
			result[MAX_EQUAL] = 2+zeroCount;
			result[MIN_EQUAL] = 2; 
			break;
		case 1: 
			result[MAX_EQUAL] = 1+zeroCount;
			result[MIN_EQUAL] = 0; 
			break;
		case 0:
			result[MAX_EQUAL] = zeroCount;
			result[MIN_EQUAL] = 0; 			
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.1");
			System.exit(0);
		}
		
		return result;
	}
	
	public int checkMaxRank(int[] result) {
		
		int maxRank = 0;
		
		switch(result[MAX_EQUAL]) {
		case 6:
			maxRank = 1;
			break;
		case 5:
			maxRank = 2;
			break;
		case 4:
			maxRank = 3;
			break;
		case 3:
			maxRank = 4;
			break;
		case 2:
			maxRank = 5;
			break;
		case 1:
		case 0:
			maxRank = 6;
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.2");
			System.exit(0);
		}
		
		return maxRank;
	}
	
	public int checkMinRank(int[] result) {
		
		int minRank = 0;
		
		switch(result[MIN_EQUAL]) {
		case 6:
			minRank = 1;
			break;
		case 5:
			minRank = 2;
			break;
		case 4:
			minRank = 3;
			break;
		case 3:
			minRank = 4;
			break;
		case 2:
			minRank = 5;
			break;
		case 0:
			minRank = 6;
			break;
		default:
			System.out.println("에러발생! 최대한 빨리 조치하겠습니다.3");
			System.exit(0);
		}
		
		return minRank;
	}
	
    int[] solution(int[] lottos, int[] win_nums) {
       int[] answer = {};
      
       sort(lottos, win_nums);
        
       System.out.println(Arrays.toString(lottos));
       System.out.println(Arrays.toString(win_nums));
       
       int zeroCount = checkZeroCount(lottos);
       
       int equalCount = checkNumber(lottos, win_nums, zeroCount);
       int[] maxMinResult = maxMinEqual(equalCount, zeroCount);
       
       int maxRank = checkMaxRank(maxMinResult);
       int minRank = checkMinRank(maxMinResult);
       
       System.out.println("최고 등수: "+maxRank);
       System.out.println("최소 등수: "+minRank);
       
       answer = new int[]{maxRank, minRank};
       
       return answer;
    }

}




package dsf;

public class MainClass {

	public static void main(String[] args) {

		int[] lottos = {0, 0, 0, 0, 0, 0};
		int[] win_nums = {20, 9, 3, 45, 4, 35};
		
		
		Solution sol = new Solution();
		
		sol.solution(lottos, win_nums);

	}

}




















































































21.10.16_2회차
===============================================================================
*hash, stack, queue
===============================================================================
























































































################################################################################################################
예제3)해시문제(루프로도 풀수 있음)

1)완주하지 못한 선수
수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.

마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

제한사항
마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
completion의 길이는 participant의 길이보다 1 작습니다.
참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
참가자 중에는 동명이인이 있을 수 있습니다.
입출력 예
participant	completion	return
["leo", "kiki", "eden"]	["eden", "kiki"]	"leo"
["marina", "josipa", "nikola", "vinko", "filipa"]	["josipa", "filipa", "marina", "nikola"]	"vinko"
["mislav", "stanko", "mislav", "ana"]	["stanko", "ana", "mislav"]	"mislav"
입출력 예 설명
예제 #1
"leo"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #2
"vinko"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #3
"mislav"는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.

출처



class Solution {
    public String solution(String[] participant, String[] completion) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42576
################################################################################################################



루프를 이용한 답:

import java.util.*;

class Solution {
    public String solution(String[] participant, String[] completion) {
        
        Arrays.sort(participant);
        Arrays.sort(completion);
        
        int i = 0;
        for(String com : completion) {
        	if(!com.equals(participant[i])) {
        		return participant[i];
        	}
        	i++;
        }
      
        return participant[i];
    }
}




해쉬를 이용한 답:
import java.util.*;

class Solution {
    public String solution(String[] participant, String[] completion) {
    	String answer = "";
      
    	HashMap<String, Integer> hm = new HashMap<>();
    	
    	for(String player : participant) {
    		hm.put(player, hm.getOrDefault(player, 0)+1);
    	}
    	
    	for(String player : completion) {
    		hm.put(player, hm.get(player)-1);
    	}
    	
    	for(String key : hm.keySet()) {
    		if(hm.get(key) != 0) {
    			answer = key;
    			break;
    		};
    	}
    	
        return answer;
    }
}























################################################################################################################
예제4)해시문제(루프로도 풀수 있음)

1)전화번호 목록
전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.

구조대 : 119
박준영 : 97 674 223
지영석 : 11 9552 4421
전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.

제한 사항
phone_book의 길이는 1 이상 1,000,000 이하입니다.
각 전화번호의 길이는 1 이상 20 이하입니다.
같은 전화번호가 중복해서 들어있지 않습니다.
입출력 예제
phone_book	return
["119", "97674223", "1195524421"]	false
["123","456","789"]	true
["12","123","1235","567","88"]	false
입출력 예 설명
입출력 예 #1
앞에서 설명한 예와 같습니다.

입출력 예 #2
한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.

입출력 예 #3
첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.



class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42577
################################################################################################################



루프를 이용한 답:



import java.util.*;

class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        
        for(int i =0; i<phone_book.length-1;i++) {
        	for(int j=i+1;j<phone_book.length;j++) {
        		if(phone_book[i].startsWith(phone_book[j])) return false;
        		if(phone_book[j].startsWith(phone_book[i])) return false;
        	}
        }
       
        return answer;
    }
}









hash를 이용한 답:

import java.util.*;

class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        
        HashMap<String, Integer> hm = new HashMap<>();
        
        
        int i = 0;
        for(String number : phone_book) {
        	hm.put(number, i);
        	i++;
        }
        
        for(String number : phone_book) {
        	for(int j=1;j<number.length();j++) {
        		if(hm.containsKey(number.substring(0, j))) return false;
        	}
        }
        
       
        return answer;
    }
}































################################################################################################################
예제5)해시문제(루프로도 풀수 있음)

1)스파이 위장

스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.

예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.

종류	이름
얼굴	동그란 안경, 검정 선글라스
상의	파란색 티셔츠
하의	청바지
겉옷	긴 코트
스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.
스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.
같은 이름을 가진 의상은 존재하지 않습니다.
clothes의 모든 원소는 문자열로 이루어져 있습니다.
모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 '_' 로만 이루어져 있습니다.
스파이는 하루에 최소 한 개의 의상은 입습니다.
입출력 예
clothes	return
[["yellowhat", "headgear"], ["bluesunglasses", "eyewear"], ["green_turban", "headgear"]]	5
[["crowmask", "face"], ["bluesunglasses", "face"], ["smoky_makeup", "face"]]	3
입출력 예 설명
예제 #1
headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.

1. yellow_hat
2. blue_sunglasses
3. green_turban
4. yellow_hat + blue_sunglasses
5. green_turban + blue_sunglasses
예제 #2
face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.

1. crow_mask
2. blue_sunglasses
3. smoky_makeup





class Solution {
    public int solution(String[][] clothes) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42578
################################################################################################################



해쉬맵을 이용해서 경우의 수 계산한 답:


import java.util.*;
class Solution {
    public int solution(String[][] clothes) {
        int answer = 1;
        
        HashMap<String, Integer> hm = new HashMap<>();
        
        for(int i =0; i<clothes.length;i++) {
        	String key = clothes[i][1]; 
        	hm.put(key, hm.getOrDefault(key, 0)+1);
        }
        
        for(String key : hm.keySet()) {
        	answer *= hm.get(key)+1;
        }
        answer -= 1;
        
        return answer;
    }
}




해쉬맵에서 밸류만 따로 꺼낸것을 iterator화 시켜서 경우의 수 계산한 답:


import java.util.*;
class Solution {
    public int solution(String[][] clothes) {
        int answer = 1;
        
        HashMap<String, Integer> hm = new HashMap<>();
        
        for(int i =0; i<clothes.length;i++) {
        	String key = clothes[i][1]; 
        	hm.put(key, hm.getOrDefault(key, 0)+1);
        }
        
        Iterator<Integer> iter = hm.values().iterator();
        
        while(iter.hasNext()) {
        	answer *= iter.next()+1;
        }
        
        answer -=1;
        
        return answer;
    }
}





























################################################################################################################
예제6)stack 문제 
	-arraylist 활용필요(메모리 신경안쓸거면 굳이 안써도 되긴함)


1)기능개발

프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
입출력 예
progresses	speeds	return
[93, 30, 55]	[1, 30, 5]	[2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]
입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

※ 공지 - 2020년 7월 14일 테스트케이스가 추가되었습니다.


class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42586
################################################################################################################






답:



import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i=progresses.length-1;i>=0;i--) {
        	int day = ((100 - progresses[i]) / speeds[i]) + 
        	(((100-progresses[i]) % speeds[i]) > 0 ? 1:0);
        	stack.push(day);
        }
        
        List<Integer> list = new ArrayList<>();
        
        while(!stack.isEmpty()) {
        	int top = stack.pop();
        	int count = 1;
        	
        	while(!stack.isEmpty() && top>= stack.peek()) {
        		count++;
        		stack.pop();
        	}

        	list.add(count);
        }
        
        answer = new int[list.size()];
        
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}































################################################################################################################
예제7)Queue 
	

1)프린터

일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.

내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.

현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.

제한사항
현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
입출력 예
priorities	location	return
[2, 1, 3, 2]	2	1
[1, 1, 9, 1, 1, 1]	0	5
입출력 예 설명
예제 #1

문제에 나온 예와 같습니다.

예제 #2

6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.

출처


class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42587
################################################################################################################






답:







import java.util.*;
class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        Queue<Integer> queue = new LinkedList<>();
        
        for(int i=0;i<priorities.length;i++) {
        	queue.offer(priorities[i]); 
        }
        
        Arrays.sort(priorities);        
        int l = location;
        int size = priorities.length-1;
        
        while(!queue.isEmpty()) {
        	int i = queue.poll();
        	if(i==priorities[size-answer]) {
        		answer++;
        		l--;
        		if(l<0) {
        			break;
        		}
        	} else {
        		queue.offer(i);
        		l--;
        		if(l<0) {
        			l = size-answer;
        		}
        	}
        }
        
        return answer;
    }
}





















################################################################################################################
예제8)Queue 
	

1)다리를 지나는 트럭
트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

경과 시간	다리를 지난 트럭	다리를 건너는 트럭	대기 트럭
0	[]	[]	[7,4,5,6]
1~2	[]	[7]	[4,5,6]
3	[7]	[4]	[5,6]
4	[7]	[4,5]	[6]
5	[7,4]	[5]	[6]
6~7	[7,4,5]	[6]	[]
8	[7,4,5,6]	[]	[]
따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

제한 조건
bridge_length는 1 이상 10,000 이하입니다.
weight는 1 이상 10,000 이하입니다.
truck_weights의 길이는 1 이상 10,000 이하입니다.
모든 트럭의 무게는 1 이상 weight 이하입니다.
입출력 예
bridge_length	weight	truck_weights	return
2	10	[7,4,5,6]	8
100	100	[10]	101
100	100	[10,10,10,10,10,10,10,10,10,10]	110
출처

※ 공지 - 2020년 4월 06일 테스트케이스가 추가되었습니다.



class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42583
################################################################################################################






답:





import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();
        
        
        int sum = 0;
        
        for(int i=0;i<truck_weights.length;i++) {
        	int truck = truck_weights[i];
        	
        	while(true) {
        		if(que.isEmpty()) {
        			que.offer(truck);
        			sum += truck;
        			answer++;
        			break;
        		}else if(que.size()==bridge_length) {
        			sum -= que.poll(); 
        			System.out.println(sum);
        			System.out.println(que.peek());
        		}else {
        			if(sum+truck <= weight) {////////////여기서왜 queue.peek()+truck하면 안될까????
					//이해함!!!! 지금 다리에 2대만 올라갈수있다고 가정하고
//보니까 이렇게 생각되는건데 다리에 최대 100대가능하다 가정하고 100대다찼을때 하나빼면 99대이고 
//sum에서 그 빠진 한대의 무게만 빠져서(모든무게가 10이라가정하면) 990이 되는거임
//99대에서 queue.peek()를 하면 10이 나오고 sum을하면 990이 나오니까~~~~당연~~~~히 sum을 써야한다!
        				que.offer(truck);
        				sum+= truck;
        				answer++;
        				break;
        			}else {
        				que.offer(0);
        				answer++;
        			}
        		}
        	}
        }
        
         
        return answer+bridge_length;
    }
}















































































21.10.17_3회차
===============================================================================
*stack(주식), heap(맵게)
===============================================================================








































































################################################################################################################
예제9) 스택 & loop문
	

1)주식가격
초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.

제한사항
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
prices의 길이는 2 이상 100,000 이하입니다.
입출력 예
prices	return
[1, 2, 3, 2, 3]	[4, 3, 1, 1, 0]
입출력 예 설명
1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.
2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.
3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.
4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.
5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.
※ 공지 - 2019년 2월 28일 지문이 리뉴얼되었습니다.


class Solution {
    public int[] solution(int[] prices) {
        int[] answer = {};
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/42584
################################################################################################################






loop문 답:

import java.util.*;
class Solution {
    public int[] solution(int[] prices) {
        
        int len = prices.length; 
        int[] answer = new int[len];
        
        for(int i=0;i<len-1;i++) {
        	for(int j=i+1;j<len;j++) {
        		answer[i]++;
        		if(prices[i]>prices[j]) {
        			break;
        		}
        	}
        }
        
        return answer;
    }
}





stack 답:

import java.util.*;
class Solution {
    public int[] solution(int[] prices) {
        
    	int len = prices.length;
    	int[] answer  = new int[len];
    	
    	Stack<Integer> stack = new Stack<>();
    	
    	int i=0;
    	stack.push(i);
    	
    	for(i=1;i<len;i++) {
    		
    		while(!stack.isEmpty() && prices[stack.peek()] > prices[i]) {
    			int idx = stack.pop();
    			answer[idx] = i - idx; 
    		}
    		
    		stack.push(i);
    	}
    	
        int size  = stack.size();
    	for(int j=0;j<size;j++) {
    		int idx = stack.pop();
    		answer[idx] = i - idx -1; 
    	}
/* 이렇게하면 size는 굳이 안만들어도됨. 위에는 정확히알고 거기까지 넣는거고 while은그냥 바닥날때까지넣는거
        while (!beginIdxs.empty()) {
            int beginIdx = beginIdxs.pop();
            terms[beginIdx] = i - beginIdx - 1;
        }
*/        
        return answer;
    }
}
























################################################################################################################
예제10) heap(우선 큐)
	

1)더 맵게
매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)
Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

제한 사항
scoville의 길이는 2 이상 1,000,000 이하입니다.
K는 0 이상 1,000,000,000 이하입니다.
scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
입출력 예
scoville	K	return
[1, 2, 3, 9, 10, 12]	7	2
입출력 예 설명
스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5
가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]

스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13
가진 음식의 스코빌 지수 = [13, 9, 10, 12]

모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.



class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/42626
################################################################################################################



답:





import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        
        
        int len = scoville.length;
        
        
        Queue<Integer> que = new PriorityQueue<>();
        
        
        for(int i=0;i<len;i++) {
        	que.offer(scoville[i]);
        }
        
        while(que.peek()<K) {
        	if(que.size()==1) return -1;
        	
        	que.offer(que.poll()+(que.poll()*2));
        	answer++;
        }
        System.out.println(que.toString());
        System.out.println(answer);
        return answer;
    }


}










































21.10.18_4회차
===============================================================================
*정렬(k번째 수_copyOfRange(), 가장 큰 수_Comparator,익명클래스)
===============================================================================















































################################################################################################################
예제11) 정렬

1)k번째 수
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.

출처
################################################################################################################


copyOfRange 학습후 답:

import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
       
        int commandLen = commands.length;
        answer = new int[commandLen];
        
        
        for(int i=0;i<commandLen;i++) {
        	int[] tmp = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
        	Arrays.sort(tmp);
        	
        	answer[i] = tmp[commands[i][2]-1];
        }

        return answer;
    }
}



copyOfRange 몰랐을때 답:

import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
        
        int len = array.length;
        answer = new int[commands.length];
        
        for(int j=0;j<commands.length;j++) {
        	int j2 = 0;
        	int[] tmp = new int[commands[j][1]-commands[j][0]+1];
        	for(int i=commands[j][0]-1;i<commands[j][1];i++) {
        		tmp[j2] = array[i];
        		j2++;
        	}
        	//System.out.println(Arrays.toString(tmp));
        	Arrays.sort(tmp);
        	//System.out.println(Arrays.toString(tmp));
        	answer[j] = tmp[commands[j][2]-1];	
        }
        
        //System.out.println(Arrays.toString(answer));
        return answer;
    }
}










################################################################################################################
예제12)정렬

1)가장 큰 수
0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.

예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.

0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.

제한 사항
numbers의 길이는 1 이상 100,000 이하입니다.
numbers의 원소는 0 이상 1,000 이하입니다.
정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.
입출력 예
numbers	return
[6, 10, 2]	"6210"
[3, 30, 34, 5, 9]	"9534330" 
	
################################################################################################################


답:




import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        
        int len = numbers.length;
        
        String[] str = new String[len];
        
        for(int i=0;i<len;i++) {
        	str[i] = String.valueOf(numbers[i]);
        }
        
        System.out.println(Arrays.toString(str));
        Arrays.sort(str, comp);
        System.out.println(Arrays.toString(str));
                
        if(str[0].equals("0")) return "0";
        
        for(int i=0;i<len;i++) {
        	answer += str[i];
        }
        System.out.println(answer);
        
        
        return answer;
    }
    
    public static Comparator<String> comp = new Comparator<String>(){
    	public int compare(String a, String b) {
    		return (b+a).compareTo(a+b);
    	}
    };
}























































21.10.19_5회차
===============================================================================
*정렬(H-INDEX), 완전탐색(모의고사,소수찾기)
===============================================================================




















































################################################################################################################
예제13)정렬

1)H-Index

H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과1에 따르면, H-Index는 다음과 같이 구합니다.

어떤 과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면 h의 최댓값이 이 과학자의 H-Index입니다.

어떤 과학자가 발표한 논문의 인용 횟수를 담은 배열 citations가 매개변수로 주어질 때, 이 과학자의 H-Index를 return 하도록 solution 함수를 작성해주세요.

제한사항
과학자가 발표한 논문의 수는 1편 이상 1,000편 이하입니다.
논문별 인용 횟수는 0회 이상 10,000회 이하입니다.
입출력 예
citations	return
[3, 0, 6, 1, 5]	3
입출력 예 설명
이 과학자가 발표한 논문의 수는 5편이고, 그중 3편의 논문은 3회 이상 인용되었습니다. 그리고 나머지 2편의 논문은 3회 이하 인용되었기 때문에 이 과학자의 H-Index는 3입니다.

※ 공지 - 2019년 2월 28일 테스트 케이스가 추가되었습니다.


################################################################################################################



답:


import java.util.*;

class Solution {
    public int solution(int[] citations) {
        int answer = 0;
        
        int len = citations.length;
        Arrays.sort(citations);
        for(int i=0;i<len;i++) {
        	int h = len-i;
        	if(citations[i]>=h) {
        		answer = h;
        		break;
        	}
        }
        
        
        return answer;
    }
}













################################################################################################################
예제14)완전탐색

1)모의고사(수포자)
수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.

1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...

1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한 조건
시험은 최대 10,000 문제로 구성되어있습니다.
문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.
입출력 예
answers	return
[1,2,3,4,5]	[1]
[1,3,2,4,2]	[1,2,3]
입출력 예 설명
입출력 예 #1

수포자 1은 모든 문제를 맞혔습니다.
수포자 2는 모든 문제를 틀렸습니다.
수포자 3은 모든 문제를 틀렸습니다.
따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.

입출력 예 #2

모든 사람이 2문제씩을 맞췄습니다.
################################################################################################################



답:




import java.util.*;

class Solution {
    public int[] solution(int[] answers) {
        int[] answer = {};
        
        int[] person1 = {1,2,3,4,5};
        int[] person2 = {2,1,2,3,2,4,2,5};
        int[] person3 = {3,3,1,1,2,2,4,4,5,5};
        
        int[] ok = new int[3];
        
        for(int i=0;i<answers.length;i++) {
        	if(person1[i%person1.length] == answers[i]) ok[0]++; 
        	if(person2[i%person2.length] == answers[i]) ok[1]++; 
        	if(person3[i%person3.length] == answers[i]) ok[2]++; 
        }
        
        int max = Math.max(Math.max(ok[0], ok[1]), ok[2]);
        
        List<Integer> list = new ArrayList<Integer>();
        
        if(ok[0]==max) list.add(1);
        if(ok[1]==max) list.add(2);
        if(ok[2]==max) list.add(3);
        
        int size = list.size();
        
        answer = new int[size];
        for(int i=0;i<size;i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}

















################################################################################################################
예제15)완전탐색

1)소수 찾기

한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
입출력 예
numbers	return
"17"	3
"011"	2
입출력 예 설명
예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.
출처
################################################################################################################



답:






import java.util.*;

class Solution {
	
	
	public List<Integer> list = new ArrayList<>();
	public boolean[] check = new boolean[7];
	public int answer = 0;
	
	public void rec(String n, String temp, int len) {
		
		if(temp.length()==len) {
			if(!list.contains(Integer.parseInt(temp))) list.add(Integer.parseInt(temp));
			return;
		}
		
		for(int i=0;i<n.length();i++) {
			if(check[i]) continue;
			
			temp += n.charAt(i);			
			check[i] = true;
			rec(n, temp, len);
			
			check[i] = false;
			temp = temp.substring(0, temp.length()-1);
		}
		
	}
	
	public void calc(int num) {
		if(num==0) return;
		if(num==1) return;
		
		for(int i=2;i<num;i++) {
			if(num%i==0) return;
		}
		
		answer++;
	}
	
    public int solution(String numbers) {
    	String temp = "";
        int len = numbers.length();
        for(int i=1;i<=len;i++) {
        	rec(numbers, temp, i);
        }
        
        
        for(int i=0;i<list.size();i++) {
        	calc(list.get(i));
        }
        
        return answer;
    }
}












































21.10.20_6회차
===============================================================================
*완전탐색(카펫),그리디_탐욕법(체육복)
===============================================================================









































################################################################################################################
예제16)완전탐색

1)카펫

Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.

carpet.png

Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.

Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.
입출력 예
brown	yellow	return
10	2	[4, 3]
8	1	[3, 3]
24	24	[8, 6]
출처

※ 공지 - 2020년 2월 3일 테스트케이스가 추가되었습니다.
※ 공지 - 2020년 5월 11일 웹접근성을 고려하여 빨간색을 노란색으로 수정하였습니다.


################################################################################################################



내가 수정한답:
class Solution {
    public int[] solution(int brown, int yellow) {
  
        int sum = brown + yellow;
        for(int i=3;i<=sum;i++) {
        	
        	if(sum%i==0) {        		
        		int col = sum/i;
        		int row = i; //i가 약수임이 증명이 된이상 sum에서 i로 나누면 약수의 쌍에서 큰값이 몫이되고 나눈 i값이 자동으로 남은 작은 값이 됨
        		
        		if((col-2)*(row-2) == yellow){ // 위처럼 값을넣으면 약수의 쌍에서 큰값이 가로로 들어가고 작은값이 세로로들어감 물론 세로가 커지는 경우도 나중엔 나오지만 그전에 끝나기때문에
								//아래처럼 col>=row를 해줄필요가 없음
        			return new int[] {col, row}; 
        		}
        	}
        	
        }
        
         return new int[0]; //사실상 의미가 없는거임 if외에 return을 넣어줘야하기때문에 필요할뿐
    }
}




다른사람 답:
class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = {};
        int sum = brown + yellow;
        for(int i=3;i<=sum;i++) {
        	
        	if(sum%i==0) {        		
        		int col = sum/i;
        		int row = sum/col;
        		
        		if((col-2)*(row-2) == yellow && col>=row){
        			return new int[] {col, row}; 
        		}
        	}
        	
        }
        
        return answer;
    }
}
































################################################################################################################
예제17)그리디_탐욕법

1)체육복

점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 
학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 
4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.

전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 
체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.

제한사항
전체 학생의 수는 2명 이상 30명 이하입니다.
체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.
입출력 예
n	lost	reserve	return
5	[2, 4]	[1, 3, 5]	5
5	[2, 4]	[3]	4
3	[3]	[1]	2
입출력 예 설명
예제 #1
1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.

예제 #2
3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.

출처

※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.
※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.
※ 공지 - 2021년 7월 28일 테스트케이스가 추가되었습니다.
※ 공지 - 2021년 8월 30일 테스트케이스가 추가되었습니다.

################################################################################################################





답:




import java.util.*;

class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        int answer = n - lost.length;
        

        
        Map<Integer, Boolean> hmR = new HashMap<>();
        Arrays.sort(lost);//여기서 정렬안하면 
        //1은 2가져가고 3은 4가져가면 딱인데 이러면 3이 먼저 2가져가서
        //1은 못가져가게되는 경우가 생김 그래서 정렬해서 각자
        //앞에서부터 가져가는 상황을 만들어야함
        //lost:3,1,6 reserve:2,4
        
        for(int i=0;i<reserve.length;i++) {
        	hmR.put(reserve[i], true);
        }
        
        for(int i=0;i<lost.length;i++) {
        	if(hmR.containsKey(lost[i])) {
        		hmR.put(lost[i], false);
        		lost[i] = -1; //밑에랑 다르게 여긴해야함
                        //2번학생이 잃어버리고 여분도있다했을때
                //2번 학생의 여분은 false가 되고 2번 학생의
                //값을 유의미하게 2 그대로 나두면 아래에서 2번이 1번은false
                //라서 못가져가고 3번을 가져감 그럼 4번학생이 
                //3번학생한테 빌려야하는데 못빌림 즉 2번이 혼자
                //2개를 빌리는것과 같음
                //lost:2,4 reserve:1,3이라가정
        		answer++;
        	}
        }
        
        for(int i=0;i<lost.length;i++) {
        	for(int num : hmR.keySet()) {
        		if(lost[i]-1 == num) {
        			if(hmR.get(num)) {     
        				hmR.put(num, false);
                        //lost[i] = -1; 여긴할필요없음 밑에 주석도마찬가지
        				answer++;
        				break;
        			}
        		} else if(lost[i]+1 == num) {
        			if(hmR.get(num)) {     
        				hmR.put(num, false);
                        //lost[i] = -1;
        				answer++;
        				break;
        			}        			
        		} 
        	}
        }
        
        return answer;
    }
}

































































21.10.21_7회차
===============================================================================
*그리디_탐욕법(조이스틱)
===============================================================================

































































################################################################################################################
예제18)그리디_탐욕법

1)조이스틱


조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA

조이스틱을 각 방향으로 움직이면 아래와 같습니다.

▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동
예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.

- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.

제한 사항
name은 알파벳 대문자로만 이루어져 있습니다.
name의 길이는 1 이상 20 이하입니다.
입출력 예
name	return
"JEROEN"	56
"JAN"	23
출처

※ 공지 - 2019년 2월 28일 테스트케이스가 추가되었습니다.



################################################################################################################


답:


class Solution {
    public int solution(String name) {
        int answer = 0;
        
        
       int len = name.length();
       
       int minLen = len -1; 
       
       for(int i=0;i<len;i++) {
    	   
    	   answer += Math.min(name.charAt(i)-'A', 'Z'-name.charAt(i)+1);
    	   
    	   int nextIdx = i+1;
    	   
    	   while(nextIdx<len&&name.charAt(nextIdx)=='A') {
    		   nextIdx++;
    	   }
    	   
    	   minLen = Math.min(minLen, i*2+1+(len-1-nextIdx));
    	   //이걸 간단하게하면 Math.min(minLen, i*2+(len-nextIdx));

		//위코드가 적혀야하는 이유 케이스: BBAAABB 
       }
   
        answer += minLen;

        return answer;
    }
}
































































21.10.22_8회차
===============================================================================
*그리디_탐욕법(큰 수 만들기)
===============================================================================



































































################################################################################################################
예제19)그리디_탐욕법

1)큰 수 만들기
어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.

예를 들어, 숫자 1924에서 수 두 개를 제거하면 [19, 12, 14, 92, 94, 24] 를 만들 수 있습니다. 이 중 가장 큰 숫자는 94 입니다.

문자열 형식으로 숫자 number와 제거할 수의 개수 k가 solution 함수의 매개변수로 주어집니다. number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중 가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.

제한 조건
number는 1자리 이상, 1,000,000자리 이하인 숫자입니다.
k는 1 이상 number의 자릿수 미만인 자연수입니다.
입출력 예
number	k	return
"1924"	2	"94"
"1231234"	3	"3234"
"4177252841"	4	"775841"
출처
################################################################################################################


답:

stack의 LIFO를 이용한 방식의 답:
import java.util.Stack;

class Solution {
    public String solution(String number, int k) {
        
    	char[] result = new char[number.length()-k];
        
        String answer = "";
        
        Stack<Character> stack = new Stack<>();
        
        for(int i=0;i<number.length();i++) {
        	
        	while(!stack.isEmpty()&&stack.peek()<number.charAt(i)&&k-->0) {
        		stack.pop();
        	}
        	
        	stack.push(number.charAt(i));
        }
        
//        System.out.println("stack 갯수 : "+stack.size());
//        System.out.println("stack 원소 : " + stack.toString());
//        System.out.println(number.length()-k);
//        System.out.println(number.length());
//        System.out.println(k);
//        System.out.println();
//        System.out.println("result 갯수 : "+result.length);
//        
        
      
        for(int i=0;i<result.length;i++) {
        	result[i] = stack.get(i);
        }
        
        answer = new String(result);
        
        return answer;
    }
}

//테스트 9 〉	통과 (9023.40ms, 376MB)
//테스트 10 〉	통과 (5466.03ms, 399MB)


//테스트 9 〉	통과 (40.96ms, 98MB) 위에껀 마지막 for문에 answer += stack.get(i)한거
							//엄청느림
//테스트 10 〉	통과 (52.74ms, 103MB) //지금처럼 answer라는 문자열에 들어가야할 갯수만안다면
	//char배열로 받아서 그걸 string에 넣는 전통적인 방식을 택하는게 좋음







StringBuilder를 이용한 시간단축답(안좋은방식):

class Solution {
    public StringBuilder solution(String number, int k) {
        
        
        StringBuilder answer = new StringBuilder();
        
        int len = number.length()-k;
        int idx = 0;
        for(int i=0;i<len;i++) {
        	char max = '0';
        	for(int j=idx;j<=k+i;j++) {
        		if(max<number.charAt(j)) {
        			max = number.charAt(j);
        			idx = j+1;
        		}
        	}
        	answer.append(max);
        }
        
        return answer;
    }
}










































































21.10.23_9회차
===============================================================================
*그리디_탐욕법(구명보트), 깊이우선탬색(DFS)
===============================================================================

































































################################################################################################################
예제20)그리디_탐욕법

1)구명보트

무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.

구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.

사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.
입출력 예
people	limit	return
[70, 50, 80, 50]	100	3
[70, 80, 50]	100	3

히든케이스: 40,50,150,160 limit 200 > 2
	-처음 작은 몸무게의 사람들기준으로 비교해서 태우면 안된다는 반증
	100,500,500,900,950 limit 1000 > 3
	-가장 처음의 값과 마지막부터 감소한 인덱스들의 값들을 더한것들이 limit보다 클시
		그사람들부터 태워가야한다는 예시

################################################################################################################


답:





import java.util.*;

class Solution {
    public int solution(int[] people, int limit) {
        int answer = 0;
        
        Arrays.sort(people);
        int len = people.length-1;
        
        for(int i=0;i<=len;i++) {
        	while(len>i&&people[i]+people[len--] > limit) {
        		answer++;
        	}
        	answer++;
        }
     
        return answer;
    }
}







1+1+1+1+1
1+1+1+1-1
1+1+1-1+1
1+1+1-1-1
1+1-1+1+1
1+1-1+1-1
1+1-1-1+1
1+1-1-1-1










################################################################################################################
예제21)깊이 우선탐색(DFS)

1)아래 링크에 들어가서 나온 그래프대로 이루어지도록 dfs 를 구현하라

https://codingnojam.tistory.com/44

################################################################################################################


답:


package study.blog.codingnojam;
public class Study_DFS_Recursion {
// 방문처리에 사용 할 배열선언
static boolean[] vistied = new boolean[9];
// 그림예시 그래프의 연결상태를 2차원 배열로 표현
// 인덱스가 각각의 노드번호가 될 수 있게 0번인덱스는 아무것도 없는 상태라고 생각하시면됩니다.
static int[][] graph = {{}, {2,3,8}, {1,6,8}, {1,5}, {5,7}, {3,4,7}, {2}, {4,5}, {1,2}};
public static void main(String[] args) {
dfs(1);
}
static void dfs(int nodeIndex) {
// 방문 처리
vistied[nodeIndex] = true;
// 방문 노드 출력
System.out.print(nodeIndex + " -> ");
// 방문한 노드에 인접한 노드 찾기
for (int node : graph[nodeIndex]) {
// 인접한 노드가 방문한 적이 없다면 DFS 수행
if(!vistied[node]) {
dfs(node);
}
}
}
}

출처: https://codingnojam.tistory.com/44 [코딩은 알면 know jam! 모르면 no jam!]














################################################################################################################
예제22)깊이 우선탐색(DFS)

1)타겟넘버
n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
각 숫자는 1 이상 50 이하인 자연수입니다.
타겟 넘버는 1 이상 1000 이하인 자연수입니다.
입출력 예
numbers	target	return
[1, 1, 1, 1, 1]	3	5
입출력 예 설명
문제에 나온 예와 같습니다.
################################################################################################################


답:




class Solution {
	int answer = 0;
	
	public void dfs(int[] numbers, int depth, int target, int result) {
		if(depth == numbers.length) {
			if(target==result) {
				answer++;
			}
			return;
		}
		
		int add = result + numbers[depth];
		int sub = result - numbers[depth];
		
		dfs(numbers, depth+1, target, add);
		dfs(numbers, depth+1, target, sub);
	}
	
    public int solution(int[] numbers, int target) {
        
        
        dfs(numbers, 0, target, 0);
        
        return answer;
    }
}