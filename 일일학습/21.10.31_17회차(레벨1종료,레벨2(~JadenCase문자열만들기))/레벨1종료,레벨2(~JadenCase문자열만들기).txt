21.10.31_17회차
===============================================================================
*레벨1종료,레벨2(~JadenCase문자열만들기)
===============================================================================







#########################################################################################
예제44)연습문제

1)서울에서 김서방 찾기
String형 배열 seoul의 element중 "Kim"의 위치 x를 찾아, "김서방은 x에 있다"는 String을 반환하는 함수, solution을 완성하세요. seoul에 "Kim"은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.

제한 사항
seoul은 길이 1 이상, 1000 이하인 배열입니다.
seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.
"Kim"은 반드시 seoul 안에 포함되어 있습니다.
입출력 예
seoul	return
["Jane", "Kim"]	"김서방은 1에 있다"



class Solution {
    public String solution(String[] seoul) {
        String answer = "";
        
        
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12919
#########################################################################################



답:



class Solution {
    public String solution(String[] seoul) {
        String answer = "";
        
        if(seoul.length==1) return "김서방은 0에 있다"; 
        
        
        int idx = 0; 
        for(String person : seoul) {
        	if(person.equals("Kim")) {
        		break;
        	}
        	idx++;
        }
        
        answer = "김서방은 "+idx+"에 있다";
        return answer;
    }
}
























#########################################################################################
예제45)연습문제

1)문자열 다루기 기본
문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 "a234"이면 False를 리턴하고 "1234"라면 True를 리턴하면 됩니다.

제한 사항
s는 길이 1 이상, 길이 8 이하인 문자열입니다.
입출력 예
s	return
"a234"	false
"1234"	true



https://programmers.co.kr/learn/courses/30/lessons/12918
#########################################################################################



처음 내가 푼 답:
-이답은 Integer햇을때 처음에 부호 - 혹은 +가 와도 바꿔줘서 true가 되기때매 안되는건 알지만 혹시 테스트케이스엔 없을수 있으니 돌려봤는데 없었던 코드
	-하지만 궁극적으론 틀린 코드인 셈이다.


class Solution {
    public boolean solution(String s) {
        boolean answer = false;
        
        int len = s.length();
        
        if(len == 4 || len == 6) {        	
        	try {
        		Integer.valueOf(s);
        		answer = true;
        	}catch(Exception e) {}
        }
        
        return answer;
    }
}


다른 답:


class Solution {
  public boolean solution(String s) {
	  int len = s.length();
	  
	  if(len != 4 && len != 6) {
		  return false;
	  }
	  
	  for(int i=0;i<len;i++) {
		  if(s.charAt(i)<'0' || s.charAt(i)>'9') {
			  return false;
		  }
	  }
	  
	  return true;
  }
}



















#########################################################################################
예제46)연습문제

1)문자열 내림차순으로 배치하기
문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.
s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다.

제한 사항
str은 길이 1 이상인 문자열입니다.
입출력 예
s	return
"Zbcdefg"	"gfedcbZ"

class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12917


*****효율 참고
1,2,3답중에 3번이 가장 빠름
1번에서 Comparator인터페이스의 메서드를 이용하는것보다 Collections의 메서드를 이용하는게 아주 조금 더 빠름
3>2>1
직접만든 2가 만들어진 클래스의 메서드 가져오는거보다 더 빠름

3번은 범접불가
#########################################################################################



1)이미 만들어 져있는 클래스(Collections) 혹은 인터페이스(Comparator)의 reverseOrder()메소드 사용한 답:

import java.util.Arrays;
import java.util.*;

class Solution {
    public String solution(String s) {
        String answer = "";
       
        Character[] ch = new Character[s.length()];
        for(int i=0;i<s.length();i++) {
        	ch[i] = s.charAt(i);
        }
        
        Arrays.sort(ch, Collections.reverseOrder());
        
        for(int i=0;i<ch.length;i++) {
        	answer += ch[i];
        }
       
        return answer;
    }
}




2)직접 Comparator interface를 구현한 클래스를 직접 만들어서 내림차순 적용한 답 :
	-이건 내림차순만 할때는 딱히 필요없지만 내림차순이 아닌 다른 특정한 규칙이 들어간 비교가 필요할때 사용된다.

import java.util.Arrays;
import java.util.*;

class Solution {
	
	public Comparator<Character> comp = new Comparator<Character>() {
		public int compare(Character o1, Character o2) {
			return o2.compareTo(o1);
		}; 
	};
	
    public String solution(String s) {
        String answer = "";
        
        int len = s.length();
        Character[] tmp = new Character[len];
        
        for(int i=0;i<len;i++) {
        	tmp[i] = s.charAt(i);
        }
        
        Arrays.sort(tmp, comp);
        
        for(int i=0;i<len;i++) {
        	answer += tmp[i];
        }
       
        return answer;
    }
}






3)StringBuilder 객체를 만들고 해당 객체의 reverse()메소드를 이용한 답:
import java.util.Arrays;
import java.util.*;

class Solution {
	

    public String solution(String s) {
        String answer = "";
        
        int len = s.length();
       
        char[] tmp = s.toCharArray();
        Arrays.sort(tmp);
        
        
        answer = new StringBuilder(new String(tmp)).reverse().toString();
      
        return answer;
    }
} 























#########################################################################################
예제47)연습문제

1)문자열 내 p와 y의 개수
대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 'p'의 개수와 'y'의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. 'p', 'y' 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.

예를 들어 s가 "pPoooyY"면 true를 return하고 "Pyy"라면 false를 return합니다.

제한사항
문자열 s의 길이 : 50 이하의 자연수
문자열 s는 알파벳으로만 이루어져 있습니다.
입출력 예
s	answer
"pPoooyY"	true
"Pyy"	false
입출력 예 설명
입출력 예 #1
'p'의 개수 2개, 'y'의 개수 2개로 같으므로 true를 return 합니다.

입출력 예 #2
'p'의 개수 1개, 'y'의 개수 2개로 다르므로 false를 return 합니다.

※ 공지 - 2021년 8월 23일 테스트케이스가 추가되었습니다.
class Solution {
    boolean solution(String s) {
        boolean answer = true;

        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12916
#########################################################################################

다른사람답:

class Solution {
    boolean solution(String s) {
        s = s.toLowerCase();
        int count = 0;
        
        for(int i=0;i<s.length();i++) {
        	if(s.charAt(i) == 'p') count++;
        	else if(s.charAt(i) == 'y') count--;
        }

        return count==0;
    }
}





다른사람 답 변형(s를 char[]에 넣으면 더 빠르지 않을까 싶어서 했는데 어떤건 빠르고 어떤건 느리고 그러네)한 답:

class Solution {
    boolean solution(String s) {
        boolean answer = true;
        s = s.toLowerCase();
        
        char[] tmp = s.toCharArray();
        int count = 0;
        
        for(int i=0;i<tmp.length;i++) {
        	if(tmp[i] == 'p') count++;
        	else if(tmp[i] == 'y') count--;
        }
        
        if(count != 0) answer = false;
        
        return answer;
    }
}



처음 내답:

class Solution {
    boolean solution(String s) {
        boolean answer = true;
        s = s.toLowerCase();
        
        char[] tmp = s.toCharArray();
        int Pcount = 0;
        int Ycount = 0;
        for(int i=0;i<tmp.length;i++) {
        	if(tmp[i] == 'p') Pcount++;
        	else if(tmp[i] == 'y') Ycount++;
        }
        
        if(Pcount != Ycount) answer = false;
        
        return answer;
    }
}





















#########################################################################################
예제48)연습문제

1)문자열 내 마음대로 정렬하기
문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.

제한 조건
strings는 길이 1 이상, 50이하인 배열입니다.
strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
모든 strings의 원소의 길이는 n보다 큽니다.
인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
입출력 예
strings	n	return
["sun", "bed", "car"]	1	["car", "bed", "sun"]
["abce", "abcd", "cdx"]	2	["abcd", "abce", "cdx"]
입출력 예 설명
입출력 예 1
"sun", "bed", "car"의 1번째 인덱스 값은 각각 "u", "e", "a" 입니다. 이를 기준으로 strings를 정렬하면 ["car", "bed", "sun"] 입니다.

입출력 예 2
"abce"와 "abcd", "cdx"의 2번째 인덱스 값은 "c", "c", "x"입니다. 따라서 정렬 후에는 "cdx"가 가장 뒤에 위치합니다. "abce"와 "abcd"는 사전순으로 정렬하면 "abcd"가 우선하므로, 답은 ["abcd", "abce", "cdx"] 입니다.


class Solution {
    public String[] solution(String[] strings, int n) {
        String[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12915
#########################################################################################



답:


import java.util.*;

class Solution {
    public String[] solution(String[] strings, int n) {
        int len = strings.length;
        String[] answer = new String[len];
        if(len == 1) {
        	answer[0] = strings[0];
        	return answer;
        }
   
        ArrayList<String> list = new ArrayList<>();
        for(int i=0;i<len;i++) {
        	list.add(strings[i].charAt(n)+strings[i]);
        }
        
        Collections.sort(list);
        
        for(int i=0;i<len;i++) {
        	answer[i] = list.get(i).substring(1, list.get(i).length());
        }
        
        return answer;
    }
}


























#########################################################################################
예제49)연습문제

1)두 정수 사이의 합
두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.

제한 조건
a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
a와 b의 대소관계는 정해져있지 않습니다.
입출력 예
a	b	return
3	5	12
3	3	3
5	3	12

class Solution {
    public long solution(int a, int b) {
        long answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12912
#########################################################################################



답:





import java.util.*;

class Solution {
    public long solution(int a, int b) {
        long answer = 0;
        
        if(a==b) return a;
        
        if(a>b) {
        	int tmp = a;
        	a = b;
        	b = tmp;
        }
      
        for(int i=a;i<=b;i++) {
        	answer += i;
        }
        
        return answer;
    }
}






















#########################################################################################
예제50)연습문제

1)나누어 떨어지는 숫자 배열
array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.
divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요.

제한사항
arr은 자연수를 담은 배열입니다.
정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다.
divisor는 자연수입니다.
array는 길이 1 이상인 배열입니다.
입출력 예
arr	divisor	return
[5, 9, 7, 10]	5	[5, 10]
[2, 36, 1, 3]	1	[1, 2, 3, 36]
[3,2,6]	10	[-1]
입출력 예 설명
입출력 예#1
arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다.

입출력 예#2
arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다.

입출력 예#3
3, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다



class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = {};
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12910
#########################################################################################



답:



import java.util.*;

class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = {};
        
        List<Integer> list = new ArrayList<>();
        
        for(int i=0;i<arr.length;i++) {
        	if(arr[i]%divisor==0) {
        		list.add(arr[i]);
        	}
        }
        
        if(list.size()==0) {
        	answer = new int[1];
        	answer[0] = -1;
        	return answer;
        }
        
        
        Collections.sort(list);
         
        answer = new int[list.size()];
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}
























#########################################################################################
예제51)연습문제

1)같은 숫자는 싫어

배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,

arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.

제한사항
배열 arr의 크기 : 1,000,000 이하의 자연수
배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수
입출력 예
arr	answer
[1,1,3,3,0,1,1]	[1,3,0,1]
[4,4,4,3,3]	[4,3]
입출력 예 설명
입출력 예 #1,2
문제의 예시와 같습니다.


import java.util.*;

public class Solution {
    public int[] solution(int []arr) {
        int[] answer = {};
        
        // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
        System.out.println("Hello Java");

        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12906
#########################################################################################



답:



import java.util.*;

public class Solution {
    public int[] solution(int[] arr) {
        int[] answer = {};
        
        if(arr.length==1) return arr;
 
        
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<arr.length;i++) {
        	list.add(arr[i]);
        	while(i<arr.length-1&&arr[i]==arr[i+1]) {
        		i++;
        	}
        }
        
        answer = new int[list.size()];
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}






























#########################################################################################
예제52)연습문제

1)가운데 글자 가져오기

단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요. 단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다.

재한사항
s는 길이가 1 이상, 100이하인 스트링입니다.
입출력 예
s	return
"abcde"	"c"
"qwer"	"we"



class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/12903
#########################################################################################



답:


class Solution {
    public String solution(String s) {
        String answer = "";
        
        int len = s.length();
        
        if(len % 2==0) {
        	answer += s.charAt((len / 2 - 1)); 
        	answer += s.charAt((len / 2)); 
        } else {
        	answer += s.charAt(len / 2);
        }
        
        return answer;
    }
}



다른사람 답:

class Solution {
    public String solution(String s) {
        String answer = "";
        int len = s.length();
        
        return s.substring((len-1)/2, (len/2)+1);
    }
}























#########################################################################################
예제53)연습문제

1)2016년
2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT

입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 "TUE"를 반환하세요.

제한 조건
2016년은 윤년입니다.
2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)
입출력 예
a	b	result
5	24	"TUE"


class Solution {
    public String solution(int a, int b) {
        String answer = "";
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12901
#########################################################################################



답:




class Solution {
    public String solution(int a, int b) {
        String answer = "";
        
        String[] week = {"THU", "FRI", "SAT", "SUN", "MON",
        		"TUE", "WED"};
        
        int[] month = {0,31,29,31,30,31,30,31,31,30,31,30,31};
        
        int sum = 0;
        
        for(int i=1;i<a;i++) {
        	sum += month[i];
        }
        
        int day = (sum + b)%7;
        answer = week[day];
        
        return answer;
    }
}
























#########################################################################################
예제54)연습문제

1)N개의 최소공배수

두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 예를 들어 2와 7의 최소공배수는 14가 됩니다. 정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. n개의 숫자를 담은 배열 arr이 입력되었을 때 이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.

제한 사항
arr은 길이 1이상, 15이하인 배열입니다.
arr의 원소는 100 이하인 자연수입니다.
입출력 예
arr	result
[2,6,8,14]	168
[1,2,3]	6



class Solution {
    public int solution(int[] arr) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/12953
#########################################################################################



답:

import java.util.Arrays;

class Solution {
    
    public int GCD(int a, int b){
        if(a%b==0){
            return b;
        }else{
            return GCD(b, a%b);
        }
    }
    
    public int LCM(int a, int b){
        return (a*b)/GCD(a,b);
    }
    
    public int solution(int[] arr) {
        int answer = 0;
        if(arr.length == 1) return arr[0];
        
        
        Arrays.sort(arr);
        answer = LCM(arr[0], arr[1]);
        
        for(int i=2;i<arr.length;i++) {
        	answer = LCM(answer, arr[i]);
        }
        
        return answer;
    }
}



























#########################################################################################
예제55)연습문제

1)JadenCase 문자열 만들기
JadenCase란 모든 단어의 첫 문자가 대문자이고, 그 외의 알파벳은 소문자인 문자열입니다. 문자열 s가 주어졌을 때, s를 JadenCase로 바꾼 문자열을 리턴하는 함수, solution을 완성해주세요.

제한 조건
s는 길이 1 이상인 문자열입니다.
s는 알파벳과 공백문자(" ")로 이루어져 있습니다.
첫 문자가 영문이 아닐때에는 이어지는 영문은 소문자로 씁니다. ( 첫번째 입출력 예 참고 )
입출력 예
s	return
"3people unFollowed me"	"3people Unfollowed Me"
"for the last week"	"For The Last Week"


class Solution {
    public String solution(String s) {
        String answer = "";
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/12951
#########################################################################################



내답(split안하고 아스키값을 이용하여 대문자로변환):
	-내꺼가 훨씬 빠르긴한데 아마 문제의 의도는 split이였던듯
import java.util.Arrays;

class Solution {
    public String solution(String s) {
        String answer = "";
        
        s = s.toLowerCase();
        char[] tmp = s.toCharArray();
  
        
        int j = 0;
        for(int i=0;i<s.length();i++) {
        	if(s.charAt(i)==' ') {
        		j = 0;
        	} else if(s.charAt(i) < 'a' || s.charAt(i) > 'z') {
        		j++;
        	} else if(j==0) {
        		tmp[i] = (char)(s.charAt(i)-32);
        		j++;
        	}
        	
        }
        
        answer = new String(tmp);
        
        return answer;
    }
}



딴사람답(SPLIT사용하고 toUpperCase() 메소드를 이용하여 값구함):

import java.util.Arrays;

class Solution {
    public String solution(String s) {
        String answer = "";
        
        String[] sp = s.toLowerCase().split("");
   
        boolean check = true;
        
        for(int i=0;i<sp.length;i++) {
        	
        	if(sp[i].equals(" ")) {
        		check = true;
        		answer += " ";
        		continue;
        	}
        	
        	if(check) {
        		answer += sp[i].toUpperCase();
        		check = false;
        	}else {
        		answer += sp[i];
        	}
        }
        
        
        
        return answer;
    }
}