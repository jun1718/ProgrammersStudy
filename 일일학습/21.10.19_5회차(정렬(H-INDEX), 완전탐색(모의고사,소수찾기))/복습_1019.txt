21.10.19_5회차
===============================================================================
*복습
===============================================================================


################################################################################################################
예제11) 정렬

1)k번째 수
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.

출처


import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
    	int len = commands.length;
        int[] answer = new int[len];
        
        
        for(int i=0;i<len;i++) {
        	int[] arr = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
        	
        	Arrays.sort(arr);
        	answer[i] = arr[commands[i][2]-1];
        }
        
        
        return answer;
    }
}

################################################################################################################


copyOfRange 학습후 답:

import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
       
        int commandLen = commands.length;
        answer = new int[commandLen];
        
        
        for(int i=0;i<commandLen;i++) {
        	int[] tmp = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
        	Arrays.sort(tmp);
        	
        	answer[i] = tmp[commands[i][2]-1];
        }

        return answer;
    }
}



copyOfRange 몰랐을때 답:

import java.util.*;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = {};
        
        int len = array.length;
        answer = new int[commands.length];
        
        for(int j=0;j<commands.length;j++) {
        	int j2 = 0;
        	int[] tmp = new int[commands[j][1]-commands[j][0]+1];
        	for(int i=commands[j][0]-1;i<commands[j][1];i++) {
        		tmp[j2] = array[i];
        		j2++;
        	}
        	//System.out.println(Arrays.toString(tmp));
        	Arrays.sort(tmp);
        	//System.out.println(Arrays.toString(tmp));
        	answer[j] = tmp[commands[j][2]-1];	
        }
        
        //System.out.println(Arrays.toString(answer));
        return answer;
    }
}









################################################################################################################
예제12)정렬

1)가장 큰 수
0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.

예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.

0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.

제한 사항
numbers의 길이는 1 이상 100,000 이하입니다.
numbers의 원소는 0 이상 1,000 이하입니다.
정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.
입출력 예
numbers	return
[6, 10, 2]	"6210"
[3, 30, 34, 5, 9]	"9534330" 
	


import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        
        int len = numbers.length;
        String[] str = new String[len];
        for(int i=0;i<len;i++) {
        	str[i] = String.valueOf(numbers[i]);
        	
        	
        	
        }
        
        Arrays.sort(str, comp);
        
        
        if(str[0].equals("0")) return "0";
        
        for(int i=0;i<len;i++) answer += str[i];
        
        return answer;
    }
    
    public Comparator<String> comp = new Comparator<String>() {
    	public int compare(String o1, String o2) {
    		return (o2+o1).compareTo(o1+o2);
    	};
    };

}

################################################################################################################


답:




import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        
        int len = numbers.length;
        
        String[] str = new String[len];
        
        for(int i=0;i<len;i++) {
        	str[i] = String.valueOf(numbers[i]);
        }
        
        System.out.println(Arrays.toString(str));
        Arrays.sort(str, comp);
        System.out.println(Arrays.toString(str));
                
        if(str[0].equals("0")) return "0";
        
        for(int i=0;i<len;i++) {
        	answer += str[i];
        }
        System.out.println(answer);
        
        
        return answer;
    }
    
    public static Comparator<String> comp = new Comparator<String>(){
    	public int compare(String a, String b) {
    		return (b+a).compareTo(a+b);
    	}
    };
}












################################################################################################################
예제13)정렬

1)H-Index

H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과1에 따르면, H-Index는 다음과 같이 구합니다.

어떤 과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면 h의 최댓값이 이 과학자의 H-Index입니다.

어떤 과학자가 발표한 논문의 인용 횟수를 담은 배열 citations가 매개변수로 주어질 때, 이 과학자의 H-Index를 return 하도록 solution 함수를 작성해주세요.

제한사항
과학자가 발표한 논문의 수는 1편 이상 1,000편 이하입니다.
논문별 인용 횟수는 0회 이상 10,000회 이하입니다.
입출력 예
citations	return
[3, 0, 6, 1, 5]	3
입출력 예 설명
이 과학자가 발표한 논문의 수는 5편이고, 그중 3편의 논문은 3회 이상 인용되었습니다. 그리고 나머지 2편의 논문은 3회 이하 인용되었기 때문에 이 과학자의 H-Index는 3입니다.

※ 공지 - 2019년 2월 28일 테스트 케이스가 추가되었습니다.


import java.util.*;

class Solution {
    public int solution(int[] citations) {
       int answer = 0;
       
       Arrays.sort(citations);
       
       for(int i=0;i<citations.length;i++) {
    	   int hIndex = citations.length - i;
    	   if(hIndex<=citations[i]) {
    		   answer = hIndex;
    		   break;
    	   }
       }
       
       return answer;
    }
}


################################################################################################################



답:


import java.util.*;

class Solution {
    public int solution(int[] citations) {
        int answer = 0;
        
        int len = citations.length;
        Arrays.sort(citations);
        for(int i=0;i<len;i++) {
        	int h = len-i;
        	if(citations[i]>=h) {
        		answer = h;
        		break;
        	}
        }
        
        
        return answer;
    }
}













################################################################################################################
예제14)완전탐색

1)모의고사(수포자)
수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.

1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...

1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한 조건
시험은 최대 10,000 문제로 구성되어있습니다.
문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.
입출력 예
answers	return
[1,2,3,4,5]	[1]
[1,3,2,4,2]	[1,2,3]
입출력 예 설명
입출력 예 #1

수포자 1은 모든 문제를 맞혔습니다.
수포자 2는 모든 문제를 틀렸습니다.
수포자 3은 모든 문제를 틀렸습니다.
따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.

입출력 예 #2

모든 사람이 2문제씩을 맞췄습니다.




import java.util.*;

class Solution {
    public int[] solution(int[] answers) {
        int[] answer = {};
        
        int[] person1 = {1,2,3,4,5};
        int[] person2 = {2,1,2,3,2,4,2,5};
        int[] person3 = {3,3,1,1,2,2,4,4,5,5};
        
        int ok1 =0, ok2 = 0, ok3 = 0;
        
        for(int i=0;i<answers.length;i++) {
        	if(person1[i%person1.length] == answers[i]) ok1++; 
        	if(person2[i%person2.length] == answers[i]) ok2++; 
        	if(person3[i%person3.length] == answers[i]) ok3++; 
        }
        
        int max = Math.max(Math.max(ok1, ok2), ok3);
        
        List<Integer> list = new ArrayList<Integer>();
        
        if(max==ok1) list.add(1); 
        if(max==ok2) list.add(2); 
        if(max==ok3) list.add(3); 
       
        answer = new int[list.size()];
        
        for(int i=0;i<answer.length;i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}
################################################################################################################



답:




import java.util.*;

class Solution {
    public int[] solution(int[] answers) {
        int[] answer = {};
        
        int[] person1 = {1,2,3,4,5};
        int[] person2 = {2,1,2,3,2,4,2,5};
        int[] person3 = {3,3,1,1,2,2,4,4,5,5};
        
        int[] ok = new int[3];
        
        for(int i=0;i<answers.length;i++) {
        	if(person1[i%person1.length] == answers[i]) ok[0]++; 
        	if(person2[i%person2.length] == answers[i]) ok[1]++; 
        	if(person3[i%person3.length] == answers[i]) ok[2]++; 
        }
        
        int max = Math.max(Math.max(ok[0], ok[1]), ok[2]);
        
        List<Integer> list = new ArrayList<Integer>();
        
        if(ok[0]==max) list.add(1);
        if(ok[1]==max) list.add(2);
        if(ok[2]==max) list.add(3);
        
        int size = list.size();
        
        answer = new int[size];
        for(int i=0;i<size;i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}

















################################################################################################################
예제15)완전탐색

1)소수 찾기

한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
입출력 예
numbers	return
"17"	3
"011"	2
입출력 예 설명
예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.
출처


import java.util.*;

class Solution {
	public int answer = 0;
	public List<Integer> list = new ArrayList<>();
	public boolean[] check = new boolean[7];
	
	public void rec(String numbers, String tmp, int len) {
		if(tmp.length()==len) {
			if(!list.contains(Integer.parseInt(tmp))) list.add(Integer.parseInt(tmp));
			return;
		}
		
		for(int i=0;i<numbers.length();i++) {
			if(check[i]) continue;
			
			tmp += numbers.charAt(i);
			check[i] = true;
			
			rec(numbers, tmp, len);
			
			check[i] = false;
			tmp = tmp.substring(0, tmp.length()-1);
		}
	}
	
	public void calc(int num) {
		if(num==0) return;
		if(num==1) return;
		
		for(int i=2;i<=Math.sqrt(num);i++) {
			if(num%i==0) return;
		}
		answer++;
	}
	
    public int solution(String numbers) {
    	String tmp = "";
    	
        for(int i=1;i<=numbers.length();i++) {
        	rec(numbers, tmp, i);
        }
        
        for(int i=0;i<list.size();i++) {
        	calc(list.get(i));
        }
        
        return answer;
    }
}
################################################################################################################



답:






import java.util.*;

class Solution {
	
	
	public List<Integer> list = new ArrayList<>();
	public boolean[] check = new boolean[7];
	public int answer = 0;
	
	public void rec(String n, String temp, int len) {
		
		if(temp.length()==len) {
			if(!list.contains(Integer.parseInt(temp))) list.add(Integer.parseInt(temp));
			return;
		}
		
		for(int i=0;i<n.length();i++) {
			if(check[i]) continue;
			
			temp += n.charAt(i);			
			check[i] = true;
			rec(n, temp, len);
			
			check[i] = false;
			temp = temp.substring(0, temp.length()-1);
		}
		
	}
	
	public void calc(int num) {
		if(num==0) return;
		if(num==1) return;
		
		for(int i=2;i<num;i++) {
			if(num%i==0) return;
		}
		
		answer++;
	}
	
    public int solution(String numbers) {
    	String temp = "";
        int len = numbers.length();
        for(int i=1;i<=len;i++) {
        	rec(numbers, temp, i);
        }
        
        
        for(int i=0;i<list.size();i++) {
        	calc(list.get(i));
        }
        
        return answer;
    }
}





