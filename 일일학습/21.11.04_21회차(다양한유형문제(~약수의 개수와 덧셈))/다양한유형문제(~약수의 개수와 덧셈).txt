21.11.04_21회차()
===============================================================================
*다양한유형문제(~약수의 개수와 덧셈)
===============================================================================







#########################################################################################
예제76)Summer/Winter coding(~2018)

1)방문 길이

class Solution {
    public int solution(String dirs) {
        int answer = 0;
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/49994
#########################################################################################




답(HashSet만사용):



import java.util.*;


class Solution {
    public int solution(String dirs) {
        int answer = 0;
        
        Set<String> set = new HashSet<>();
        
        int x=0;
        int y=0;
        for(Character dir : dirs.toCharArray())
        {	
        	int lastX = x; 
        	int lastY = y;
        	
        	if(dir == 'U' && y+1 <=5) y++;
        	if(dir == 'D' && y-1 >= -5) y--;
        	if(dir == 'R' && x+1 <= 5) x++;
        	if(dir == 'L'&& x-1 >= -5) x--;
        	
        	if(lastX==x && lastY==y) {        		
        		continue;
        	}
        	
        	set.add(lastX+""+lastY+""+x+""+y);
        	set.add(x+""+y+lastX+""+lastY);
        }
        
        answer = set.size()/2;
        
        return answer;
    }
}





답(HashSet+HashMap사용):


import java.util.HashSet;
import java.util.HashMap;

class Solution {
    public int solution(String dirs) {
        int answer = 0;     
        int x = 0, y = 0;
        
        HashSet<String> set = new HashSet<>();
        HashMap<Character, int[]> map = new HashMap<>();
        
        map.put('U',new int[]{0,1});
        map.put('D',new int[]{0,-1});
        map.put('R',new int[]{1,0});
        map.put('L',new int[]{-1,0});
        
        for(Character dir : dirs.toCharArray()){
            int lastX = x, lastY = y;
            
            x += map.get(dir)[0];
            y += map.get(dir)[1];
            
            if(x>5 || x<-5){
                x -= map.get(dir)[0];
                continue;
            }
            
            if(y>5 || y<-5){
                y -= map.get(dir)[1];
                continue;
            }
                      
            //양방향 다 넣어주기
            set.add(lastX+""+lastY+""+x+""+y);
            set.add(x+""+y+""+lastX+""+lastY);
        }
        
        answer = set.size()/2;
        return answer;
    }
}




























#########################################################################################
예제77)월간 코드 챌린지 시즌 1

1)내적
길이가 같은 두 1차원 정수 배열 a, b가 매개변수로 주어집니다. a와 b의 내적을 return 하도록 solution 함수를 완성해주세요.

이때, a와 b의 내적은 a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1] 입니다. (n은 a, b의 길이)

제한사항
a, b의 길이는 1 이상 1,000 이하입니다.
a, b의 모든 수는 -1,000 이상 1,000 이하입니다.
입출력 예
a	b	result
[1,2,3,4]	[-3,-1,0,2]	3
[-1,0,1]	[1,0,-1]	-2
입출력 예 설명
입출력 예 #1

a와 b의 내적은 1*(-3) + 2*(-1) + 3*0 + 4*2 = 3 입니다.
입출력 예 #2

a와 b의 내적은 (-1)*1 + 0*0 + 1*(-1) = -2 입니다.


class Solution {
    public int solution(int[] a, int[] b) {
        int answer = 1234567890;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/70128
#########################################################################################




답:


class Solution {
    public int solution(int[] a, int[] b) {
        
        int sum =0;
        for(int i=0;i<a.length;i++) {
        	sum += a[i] * b[i];
        }
        
        
        return sum;
    }
}


























#########################################################################################
예제78)월간 코드 챌린지 시즌 1

1)3진법 뒤집기

자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
n은 1 이상 100,000,000 이하인 자연수입니다.
입출력 예
n	result
45	7
125	229
입출력 예 설명
입출력 예 #1

답을 도출하는 과정은 다음과 같습니다.
n (10진법)	n (3진법)	앞뒤 반전(3진법)	10진법으로 표현
45	1200	0021	7
따라서 7을 return 해야 합니다.
입출력 예 #2

답을 도출하는 과정은 다음과 같습니다.
n (10진법)	n (3진법)	앞뒤 반전(3진법)	10진법으로 표현
125	11122	22111	229
따라서 229를 return 해야 합니다.


class Solution {
    public int solution(int n) {
        int answer = 0;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/68935
#########################################################################################




답:










class Solution {
    public int solution(int n) {
        int answer = 0;
        

        
        String strTmp = "";
        
        
        while(n>0) {
        	strTmp = n % 3 + strTmp;
        	n /= 3;        		
        }

        StringBuilder sb = new StringBuilder(strTmp);
        
        sb.reverse();
        
        
        answer = Integer.parseInt(sb.toString(), 3);
        
        
        
        
        return answer;
    }
}
























#########################################################################################
예제79)월간 코드 챌린지 시즌 1

1)두 개 뽑아서 더하기

정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers의 길이는 2 이상 100 이하입니다.
numbers의 모든 수는 0 이상 100 이하입니다.
입출력 예
numbers	result
[2,1,3,4,1]	[2,3,4,5,6,7]
[5,0,2,7]	[2,5,7,9,12]
입출력 예 설명
입출력 예 #1

2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)
3 = 2 + 1 입니다.
4 = 1 + 3 입니다.
5 = 1 + 4 = 2 + 3 입니다.
6 = 2 + 4 입니다.
7 = 3 + 4 입니다.
따라서 [2,3,4,5,6,7] 을 return 해야 합니다.
입출력 예 #2

2 = 0 + 2 입니다.
5 = 5 + 0 입니다.
7 = 0 + 7 = 5 + 2 입니다.
9 = 2 + 7 입니다.
12 = 5 + 7 입니다.
따라서 [2,5,7,9,12] 를 return 해야 합니다.



class Solution {
    public int[] solution(int[] numbers) {
        int[] answer = {};
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/68644
#########################################################################################




답:





import java.util.*;

class Solution {
    public int[] solution(int[] numbers) {
        
        
        
        Set<Integer> set = new HashSet<>();
        
        for(int i=0;i<numbers.length-1;i++) {
        	for(int j=i+1;j<numbers.length;j++) {
        		set.add(numbers[i]+numbers[j]);        		
        	}
        }
        
        int[] answer = new int[set.size()];
        
        
        int i =0;
        for(int num : set) {
        	answer[i] = num;
        	i++;
        }
        
        Arrays.sort(answer);
        
        return answer;
    }
}




























#########################################################################################
예제80)월간 코드 챌린지 시즌 1

1)이진 변환 반복하기

0과 1로 이루어진 어떤 문자열 x에 대한 이진 변환을 다음과 같이 정의합니다.

x의 모든 0을 제거합니다.
x의 길이를 c라고 하면, x를 "c를 2진법으로 표현한 문자열"로 바꿉니다.
예를 들어, x = "0111010"이라면, x에 이진 변환을 가하면 x = "0111010" -> "1111" -> "100" 이 됩니다.

0과 1로 이루어진 문자열 s가 매개변수로 주어집니다. s가 "1"이 될 때까지 계속해서 s에 이진 변환을 가했을 때, 이진 변환의 횟수와 변환 과정에서 제거된 모든 0의 개수를 각각 배열에 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
s의 길이는 1 이상 150,000 이하입니다.
s에는 '1'이 최소 하나 이상 포함되어 있습니다.
입출력 예
s	result
"110010101001"	[3,8]
"01110"	[3,3]
"1111111"	[4,1]
입출력 예 설명
입출력 예 #1

"110010101001"이 "1"이 될 때까지 이진 변환을 가하는 과정은 다음과 같습니다.
회차	이진 변환 이전	제거할 0의 개수	0 제거 후 길이	이진 변환 결과
1	"110010101001"	6	6	"110"
2	"110"	1	2	"10"
3	"10"	1	1	"1"
3번의 이진 변환을 하는 동안 8개의 0을 제거했으므로, [3,8]을 return 해야 합니다.
입출력 예 #2

"01110"이 "1"이 될 때까지 이진 변환을 가하는 과정은 다음과 같습니다.
회차	이진 변환 이전	제거할 0의 개수	0 제거 후 길이	이진 변환 결과
1	"01110"	2	3	"11"
2	"11"	0	2	"10"
3	"10"	1	1	"1"
3번의 이진 변환을 하는 동안 3개의 0을 제거했으므로, [3,3]을 return 해야 합니다.
입출력 예 #3

"1111111"이 "1"이 될 때까지 이진 변환을 가하는 과정은 다음과 같습니다.
회차	이진 변환 이전	제거할 0의 개수	0 제거 후 길이	이진 변환 결과
1	"1111111"	0	7	"111"
2	"111"	0	3	"11"
3	"11"	0	2	"10"
4	"10"	1	1	"1"
4번의 이진 변환을 하는 동안 1개의 0을 제거했으므로, [4,1]을 return 해야 합니다.



class Solution {
    public int[] solution(String s) {
        int[] answer = {};
        return answer;
    }
}



https://programmers.co.kr/learn/courses/30/lessons/70129
#########################################################################################




답:








class Solution {
    public int[] solution(String s) {
        int[] answer = new int[2];
        
       while(s.length()>1) {
    	   int countOne=0;
    	   for(int i=0;i<s.length();i++) {
    		   if(s.charAt(i)=='0') {
    			   answer[1]++;
    		   }else {
    			   countOne++;
    		   }
    	   }
    	   
    	   s = Integer.toBinaryString(countOne);
    	   answer[0]++;
       }
        
        	
        return answer;
    }
}


























#########################################################################################
예제81)월간 코드 챌린지 시즌 2

1)음양 더하기

어떤 정수들이 있습니다. 이 정수들의 절댓값을 차례대로 담은 정수 배열 absolutes와 이 정수들의 부호를 차례대로 담은 불리언 배열 signs가 매개변수로 주어집니다. 실제 정수들의 합을 구하여 return 하도록 solution 함수를 완성해주세요.

제한사항
absolutes의 길이는 1 이상 1,000 이하입니다.
absolutes의 모든 수는 각각 1 이상 1,000 이하입니다.
signs의 길이는 absolutes의 길이와 같습니다.
signs[i] 가 참이면 absolutes[i] 의 실제 정수가 양수임을, 그렇지 않으면 음수임을 의미합니다.
입출력 예
absolutes	signs	result
[4,7,12]	[true,false,true]	9
[1,2,3]	[false,false,true]	0
입출력 예 설명
입출력 예 #1

signs가 [true,false,true] 이므로, 실제 수들의 값은 각각 4, -7, 12입니다.
따라서 세 수의 합인 9를 return 해야 합니다.
입출력 예 #2

signs가 [false,false,true] 이므로, 실제 수들의 값은 각각 -1, -2, 3입니다.
따라서 세 수의 합인 0을 return 해야 합니다.


class Solution {
    public int solution(int[] absolutes, boolean[] signs) {
        int answer = 123456789;
        return answer;
    }
}


https://programmers.co.kr/learn/courses/30/lessons/76501
#########################################################################################




답:



class Solution {
    public int solution(int[] absolutes, boolean[] signs) {
        int answer = 123456789;
        
        int sum = 0;
        for(int i=0;i<absolutes.length;i++) {
        	if(!signs[i]) absolutes[i] *= (-1);
        	
        	sum += absolutes[i];
        }
        
        return sum;
    }
}




























#########################################################################################
예제82)월간 코드 챌린지 시즌 2

1)약수의 개수와 덧셈

두 정수 left와 right가 매개변수로 주어집니다. left부터 right까지의 모든 수들 중에서, 약수의 개수가 짝수인 수는 더하고, 약수의 개수가 홀수인 수는 뺀 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ left ≤ right ≤ 1,000
입출력 예
left	right	result
13	17	43
24	27	52
입출력 예 설명
입출력 예 #1

다음 표는 13부터 17까지의 수들의 약수를 모두 나타낸 것입니다.
수	약수	약수의 개수
13	1, 13	2
14	1, 2, 7, 14	4
15	1, 3, 5, 15	4
16	1, 2, 4, 8, 16	5
17	1, 17	2
따라서, 13 + 14 + 15 - 16 + 17 = 43을 return 해야 합니다.
입출력 예 #2

다음 표는 24부터 27까지의 수들의 약수를 모두 나타낸 것입니다.
수	약수	약수의 개수
24	1, 2, 3, 4, 6, 8, 12, 24	8
25	1, 5, 25	3
26	1, 2, 13, 26	4
27	1, 3, 9, 27	4
따라서, 24 - 25 + 26 + 27 = 52를 return 해야 합니다.

class Solution {
    public int solution(int left, int right) {
        int answer = 0;
        return answer;
    }
}

https://programmers.co.kr/learn/courses/30/lessons/77884
#########################################################################################




답:




import java.util.ArrayList;
import java.util.List;

class Solution {
    public int solution(int left, int right) {
        int answer = 0;
        int count = 0;
        
        List<Integer> list = new ArrayList<>();
        
        for(int i=left; i<=right;i++) {
        	list.add(i);
        }
        
        for(int i=0; i<list.size();i++) {
        	count = 0;
        	for(int j=1;j<=list.get(i);j++) {
        		if(list.get(i)%j==0) {
        			count++;
        		}
        	}
        	
        	if(count % 2 != 0) list.set(i, list.get(i) * -1);
        }
        
        System.out.println(list.toString());
        
        for(int i=0;i<list.size();i++) {
        	answer += list.get(i);
        }
        
        return answer;
    }
}



다른 분 답:
class Solution {
    public int solution(int left, int right) {
        int answer = 0;

        for (int i=left;i<=right;i++) {
            //제곱수인 경우 약수의 개수가 홀수
            if (i % Math.sqrt(i) == 0) {
                answer -= i;
            }
            //제곱수가 아닌 경우 약수의 개수가 짝수
            else {
                answer += i;
            }
        }

        return answer;
    }
}