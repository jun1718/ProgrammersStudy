21.10.17_3회차
===============================================================================
*복습
===============================================================================


################################################################################################################
예제6)stack 문제 
	-arraylist 활용필요(메모리 신경안쓸거면 굳이 안써도 되긴함)


1)기능개발

프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
입출력 예
progresses	speeds	return
[93, 30, 55]	[1, 30, 5]	[2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]
입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

※ 공지 - 2020년 7월 14일 테스트케이스가 추가되었습니다.




import java.util.*;
class Solution {
	public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        
        Stack<Integer> stack = new Stack<>();

        for(int i=progresses.length-1;i>=0;i--) {
        	int tmp = ((100- progresses[i]) / speeds[i]) +
        			((100-progresses[i])%speeds[i] > 0 ? 1 : 0);
        	stack.push(tmp);
        }
        
        List<Integer> list = new ArrayList<>();
        
        while(!stack.isEmpty()) {
        	int count = 1;
        	int top = stack.pop();
        	while(!stack.isEmpty() && top>= stack.peek()) {
        		stack.pop();
        		count++;
        	}
        	list.add(count);
        }
        
        answer = new int[list.size()];
        
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        
        return answer;
    }
}
################################################################################################################






답:



import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i=progresses.length-1;i>=0;i--) {
        	int day = ((100 - progresses[i]) / speeds[i]) + 
        	(((100-progresses[i]) % speeds[i]) > 0 ? 1:0);
        	stack.push(day);
        }
        
        List<Integer> list = new ArrayList<>();
        
        while(!stack.isEmpty()) {
        	int top = stack.pop();
        	int count = 1;
        	
        	while(!stack.isEmpty() && top>= stack.peek()) {
        		count++;
        		stack.pop();
        	}

        	list.add(count);
        }
        
        answer = new int[list.size()];
        
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}




















################################################################################################################
예제7)Queue 
	

1)프린터

일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.

내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.

현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.

제한사항
현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
입출력 예
priorities	location	return
[2, 1, 3, 2]	2	1
[1, 1, 9, 1, 1, 1]	0	5
입출력 예 설명
예제 #1

문제에 나온 예와 같습니다.

예제 #2

6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.

출처










import java.util.*;
class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();
        
        for(int i=0;i<priorities.length;i++) {
        	que.offer(priorities[i]);
        }
        
        Arrays.sort(priorities);
        
        int l = location;
        int size = priorities.length - 1;
        while(!que.isEmpty()) {
        	int front = que.poll();
        	if(front == priorities[size-answer]) {
        		answer++;
        		l--;
        		if(l<0) {
        			break;
        		}
        	}else {
        		que.offer(front);
        		l--;
        		if(l<0) {
        			l = size-answer;
        		}
        	}
        }
        
        return answer;
    }
}
################################################################################################################






답:







import java.util.*;
class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        Queue<Integer> queue = new LinkedList<>();
        
        for(int i=0;i<priorities.length;i++) {
        	queue.offer(priorities[i]); 
        }
        
        Arrays.sort(priorities);        
        int l = location;
        int size = priorities.length-1;
        
        while(!queue.isEmpty()) {
        	int i = queue.poll();
        	if(i==priorities[size-answer]) {
        		answer++;
        		l--;
        		if(l<0) {
        			break;
        		}
        	} else {
        		queue.offer(i);
        		l--;
        		if(l<0) {
        			l = size-answer;
        		}
        	}
        }
        
        return answer;
    }
}















################################################################################################################
예제8)Queue 
	

1)다리를 지나는 트럭
트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

경과 시간	다리를 지난 트럭	다리를 건너는 트럭	대기 트럭
0	[]	[]	[7,4,5,6]
1~2	[]	[7]	[4,5,6]
3	[7]	[4]	[5,6]
4	[7]	[4,5]	[6]
5	[7,4]	[5]	[6]
6~7	[7,4,5]	[6]	[]
8	[7,4,5,6]	[]	[]
따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

제한 조건
bridge_length는 1 이상 10,000 이하입니다.
weight는 1 이상 10,000 이하입니다.
truck_weights의 길이는 1 이상 10,000 이하입니다.
모든 트럭의 무게는 1 이상 weight 이하입니다.
입출력 예
bridge_length	weight	truck_weights	return
2	10	[7,4,5,6]	8
100	100	[10]	101
100	100	[10,10,10,10,10,10,10,10,10,10]	110
출처

※ 공지 - 2020년 4월 06일 테스트케이스가 추가되었습니다.





import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();
        
        int sum = 0;
        
        for(int i=0;i<truck_weights.length;i++) {
        	int truck = truck_weights[i];
        	while(true) {
        		if(que.isEmpty()) {
        			que.offer(truck);
        			sum+= truck;
        			answer++;
        			break;
        		}else if(que.size()==bridge_length) {
        			sum -= que.poll();
        		} else {
        			if(sum+truck <= weight) {
        				que.offer(truck);
        				sum+=truck;
        				answer++;
        				break;
        			}else {
        				que.offer(0);
        				answer++;
        			}
        		}
        	}
        }
        
        
        return answer+bridge_length;
    }
}
################################################################################################################






답:





import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();
        
        
        int sum = 0;
        
        for(int i=0;i<truck_weights.length;i++) {
        	int truck = truck_weights[i];
        	
        	while(true) {
        		if(que.isEmpty()) {
        			que.offer(truck);
        			sum += truck;
        			answer++;
        			break;
        		}else if(que.size()==bridge_length) {
        			sum -= que.poll(); 
        			System.out.println(sum);
        			System.out.println(que.peek());
        		}else {
        			if(sum+truck <= weight) {////////////여기서왜 queue.peek()+truck하면 안될까????
					//이해함!!!! 지금 다리에 2대만 올라갈수있다고 가정하고
//보니까 이렇게 생각되는건데 다리에 최대 100대가능하다 가정하고 100대다찼을때 하나빼면 99대이고 
//sum에서 그 빠진 한대의 무게만 빠져서(모든무게가 10이라가정하면) 990이 되는거임
//99대에서 queue.peek()를 하면 10이 나오고 sum을하면 990이 나오니까~~~~당연~~~~히 sum을 써야한다!
        				que.offer(truck);
        				sum+= truck;
        				answer++;
        				break;
        			}else {
        				que.offer(0);
        				answer++;
        			}
        		}
        	}
        }
        
         
        return answer+bridge_length;
    }
}















################################################################################################################
예제6)stack 문제 
	-arraylist 활용필요(메모리 신경안쓸거면 굳이 안써도 되긴함)


1)기능개발

프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.
입출력 예
progresses	speeds	return
[93, 30, 55]	[1, 30, 5]	[2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]
입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

※ 공지 - 2020년 7월 14일 테스트케이스가 추가되었습니다.


import java.util.*;
class Solution {
	 public int[] solution(int[] progresses, int[] speeds) {
		 int[] answer = {};
     
		 Stack<Integer> stack = new Stack<>();
		 int len = progresses.length-1;
		 
		 for(int i =len;i>=0;i--) {
			 int day = (100 - progresses[i]) / speeds[i] + 
					 ((100-progresses[i]) % speeds[i] > 0 ? 1 : 0);
		     stack.push(day);
		 }
        
		 List<Integer> list = new ArrayList<>();
		 
		 while(!stack.isEmpty()) {
			 int top = stack.pop();
			 int count = 1;
			 while(!stack.isEmpty() && top>= stack.peek()) {
				 stack.pop();
				 count++;
			 }
			 list.add(count);
		 }
		 
		 answer = new int[list.size()];
		 for(int i=0;i<list.size();i++) {
			 answer[i] = list.get(i);
		 }
		 
		 return answer;
     }
}
################################################################################################################






답:



import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i=progresses.length-1;i>=0;i--) {
        	int day = ((100 - progresses[i]) / speeds[i]) + 
        	(((100-progresses[i]) % speeds[i]) > 0 ? 1:0);
        	stack.push(day);
        }
        
        List<Integer> list = new ArrayList<>();
        
        while(!stack.isEmpty()) {
        	int top = stack.pop();
        	int count = 1;
        	
        	while(!stack.isEmpty() && top>= stack.peek()) {
        		count++;
        		stack.pop();
        	}

        	list.add(count);
        }
        
        answer = new int[list.size()];
        
        for(int i=0;i<list.size();i++) {
        	answer[i] = list.get(i);
        }
        
        return answer;
    }
}




















################################################################################################################
예제7)Queue 
	

1)프린터

일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.

내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.

현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.

제한사항
현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
입출력 예
priorities	location	return
[2, 1, 3, 2]	2	1
[1, 1, 9, 1, 1, 1]	0	5
입출력 예 설명
예제 #1

문제에 나온 예와 같습니다.

예제 #2

6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.

출처







import java.util.*;
class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();

        int len = priorities.length;
        int l = location;
        
        for(int i=0;i<len;i++) {
        	que.offer(priorities[i]);
        }
        
        Arrays.sort(priorities);
        
        while(!que.isEmpty()) {
        	int front = que.poll();
        	if(front == priorities[(len-1)-answer]) {
        		answer++;
        		l--;
        		if(l < 0) {
        			break;
        		}
        	}else {
        		que.offer(front);
        		l--;
        		if(l<0) {
        			l = len-1 - answer;
        		}
        	}
        }
        
        return answer;
    }
}


################################################################################################################






답:







import java.util.*;
class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        
        Queue<Integer> queue = new LinkedList<>();
        
        for(int i=0;i<priorities.length;i++) {
        	queue.offer(priorities[i]); 
        }
        
        Arrays.sort(priorities);        
        int l = location;
        int size = priorities.length-1;
        
        while(!queue.isEmpty()) {
        	int i = queue.poll();
        	if(i==priorities[size-answer]) {
        		answer++;
        		l--;
        		if(l<0) {
        			break;
        		}
        	} else {
        		queue.offer(i);
        		l--;
        		if(l<0) {
        			l = size-answer;
        		}
        	}
        }
        
        return answer;
    }
}















################################################################################################################
예제8)Queue 
	

1)다리를 지나는 트럭
트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

경과 시간	다리를 지난 트럭	다리를 건너는 트럭	대기 트럭
0	[]	[]	[7,4,5,6]
1~2	[]	[7]	[4,5,6]
3	[7]	[4]	[5,6]
4	[7]	[4,5]	[6]
5	[7,4]	[5]	[6]
6~7	[7,4,5]	[6]	[]
8	[7,4,5,6]	[]	[]
따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

제한 조건
bridge_length는 1 이상 10,000 이하입니다.
weight는 1 이상 10,000 이하입니다.
truck_weights의 길이는 1 이상 10,000 이하입니다.
모든 트럭의 무게는 1 이상 weight 이하입니다.
입출력 예
bridge_length	weight	truck_weights	return
2	10	[7,4,5,6]	8
100	100	[10]	101
100	100	[10,10,10,10,10,10,10,10,10,10]	110
출처

※ 공지 - 2020년 4월 06일 테스트케이스가 추가되었습니다.

import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
    
        Queue<Integer> que = new LinkedList<>();
        
        int sum = 0;
        for(int i=0;i<truck_weights.length;i++) {
        	int truck = truck_weights[i];
        	while(true) {
        		if(que.isEmpty()) {
        			que.offer(truck);
        			sum+=truck;
        			answer++;
        			break;
        		}else if(que.size()==bridge_length) {
        			sum -= que.poll();
        		}else {
        			if(sum+truck <= weight) {
        				que.offer(truck);
        				sum+=truck;
        				answer++;
        				break;
        			}else {
        				que.offer(0);
        				answer++;
        			}
        		}
        	}
        }
        
        return answer+bridge_length;
    }
}
################################################################################################################






답:





import java.util.*;
class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        
        Queue<Integer> que = new LinkedList<>();
        
        
        int sum = 0;
        
        for(int i=0;i<truck_weights.length;i++) {
        	int truck = truck_weights[i];
        	
        	while(true) {
        		if(que.isEmpty()) {
        			que.offer(truck);
        			sum += truck;
        			answer++;
        			break;
        		}else if(que.size()==bridge_length) {
        			sum -= que.poll(); 
        			System.out.println(sum);
        			System.out.println(que.peek());
        		}else {
        			if(sum+truck <= weight) {////////////여기서왜 queue.peek()+truck하면 안될까????
					//이해함!!!! 지금 다리에 2대만 올라갈수있다고 가정하고
//보니까 이렇게 생각되는건데 다리에 최대 100대가능하다 가정하고 100대다찼을때 하나빼면 99대이고 
//sum에서 그 빠진 한대의 무게만 빠져서(모든무게가 10이라가정하면) 990이 되는거임
//99대에서 queue.peek()를 하면 10이 나오고 sum을하면 990이 나오니까~~~~당연~~~~히 sum을 써야한다!
        				que.offer(truck);
        				sum+= truck;
        				answer++;
        				break;
        			}else {
        				que.offer(0);
        				answer++;
        			}
        		}
        	}
        }
        
         
        return answer+bridge_length;
    }
}











################################################################################################################
예제9) 스택 & loop문
	

1)주식가격
초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.

제한사항
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
prices의 길이는 2 이상 100,000 이하입니다.
입출력 예
prices	return
[1, 2, 3, 2, 3]	[4, 3, 1, 1, 0]
입출력 예 설명
1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.
2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.
3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.
4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.
5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.
※ 공지 - 2019년 2월 28일 지문이 리뉴얼되었습니다.











import java.util.Stack;

class Solution {
    public int[] solution(int[] prices) {

    	int len = prices.length;
    	int[] answer = new int[len];
    	
    	
    	Stack<Integer> stack = new Stack<>();
    	
    	int i=0;
    	
    	stack.push(i);
    
    	for(i=1;i<len;i++) {
    		while(!stack.isEmpty() && prices[stack.peek()] > prices[i]) {
    			int idx = stack.pop();
    			answer[idx] = i - idx; 
    		}
    		stack.push(i);
    	}
    	
    	int size = stack.size();
    	for(int j=0;j<size;j++) {
    		int idx = stack.pop();
    		answer[idx] = (i-1)-idx;
    	}
    	
        return answer;
    }
}
################################################################################################################






loop문 답:

import java.util.*;
class Solution {
    public int[] solution(int[] prices) {
        
        int len = prices.length; 
        int[] answer = new int[len];
        
        for(int i=0;i<len-1;i++) {
        	for(int j=i+1;j<len;j++) {
        		answer[i]++;
        		if(prices[i]>prices[j]) {
        			break;
        		}
        	}
        }
        
        return answer;
    }
}





stack 답:

import java.util.*;
class Solution {
    public int[] solution(int[] prices) {
        
    	int len = prices.length;
    	int[] answer  = new int[len];
    	
    	Stack<Integer> stack = new Stack<>();
    	
    	int i=0;
    	stack.push(i);
    	
    	for(i=1;i<len;i++) {
    		
    		while(!stack.isEmpty() && prices[stack.peek()] > prices[i]) {
    			int idx = stack.pop();
    			answer[idx] = i - idx; 
    		}
    		
    		stack.push(i);
    	}
    	
        int size  = stack.size();
    	for(int j=0;j<size;j++) {
    		int idx = stack.pop();
    		answer[idx] = i - idx -1; 
    	}
/* 이렇게하면 size는 굳이 안만들어도됨. 위에는 정확히알고 거기까지 넣는거고 while은그냥 바닥날때까지넣는거
        while (!beginIdxs.empty()) {
            int beginIdx = beginIdxs.pop();
            terms[beginIdx] = i - beginIdx - 1;
        }
*/        
        return answer;
    }
}

















################################################################################################################
예제10) heap(우선 큐)
	

1)더 맵게
매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)
Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

제한 사항
scoville의 길이는 2 이상 1,000,000 이하입니다.
K는 0 이상 1,000,000,000 이하입니다.
scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
입출력 예
scoville	K	return
[1, 2, 3, 9, 10, 12]	7	2
입출력 예 설명
스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5
가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]

스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13
가진 음식의 스코빌 지수 = [13, 9, 10, 12]

모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.




import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        
        int len = scoville.length;
        
        Queue<Integer> pQue = new PriorityQueue<>();
        
        for(int i=0;i<len;i++) {
        	pQue.offer(scoville[i]);
        }
        
        while(pQue.peek()<K) {
        	if(pQue.size()==1) return -1;
        	
        	pQue.offer(pQue.poll()+pQue.poll()*2);
        	answer++;
        }
     
        return answer;
    }


}
################################################################################################################



답:





import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        
        
        int len = scoville.length;
        
        
        Queue<Integer> que = new PriorityQueue<>();
        
        
        for(int i=0;i<len;i++) {
        	que.offer(scoville[i]);
        }
        
        while(que.peek()<K) {
        	if(que.size()==1) return -1;
        	
        	que.offer(que.poll()+(que.poll()*2));
        	answer++;
        }
        System.out.println(que.toString());
        System.out.println(answer);
        return answer;
    }


}